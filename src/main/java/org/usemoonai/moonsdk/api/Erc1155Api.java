/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.api;

import org.usemoonai.moonsdk.client.ApiCallback;
import org.usemoonai.moonsdk.client.ApiClient;
import org.usemoonai.moonsdk.client.ApiException;
import org.usemoonai.moonsdk.client.ApiResponse;
import org.usemoonai.moonsdk.client.Configuration;
import org.usemoonai.moonsdk.client.Pair;
import org.usemoonai.moonsdk.client.ProgressRequestBody;
import org.usemoonai.moonsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.usemoonai.moonsdk.models.Erc1155Request;
import org.usemoonai.moonsdk.models.TransactionAPIResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Erc1155Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Erc1155Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Erc1155Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for balanceOf
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceOfCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/balance-of"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceOfValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling balanceOf(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling balanceOf(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling balanceOf(Async)");
        }

        return balanceOfCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse balanceOf(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = balanceOfWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> balanceOfWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = balanceOfValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceOfAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceOfValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for balanceOfBatch
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceOfBatchCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/balance-of-batch"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceOfBatchValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling balanceOfBatch(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling balanceOfBatch(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling balanceOfBatch(Async)");
        }

        return balanceOfBatchCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse balanceOfBatch(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = balanceOfBatchWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> balanceOfBatchWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = balanceOfBatchValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceOfBatchAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceOfBatchValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for isApprovedForAll
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isApprovedForAllCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/is-approved-for-all"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isApprovedForAllValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling isApprovedForAll(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling isApprovedForAll(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling isApprovedForAll(Async)");
        }

        return isApprovedForAllCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse isApprovedForAll(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = isApprovedForAllWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> isApprovedForAllWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = isApprovedForAllValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isApprovedForAllAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = isApprovedForAllValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for safeBatchTransferFrom
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call safeBatchTransferFromCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/safe-batch-transfer-from"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call safeBatchTransferFromValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling safeBatchTransferFrom(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling safeBatchTransferFrom(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling safeBatchTransferFrom(Async)");
        }

        return safeBatchTransferFromCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse safeBatchTransferFrom(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = safeBatchTransferFromWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> safeBatchTransferFromWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = safeBatchTransferFromValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call safeBatchTransferFromAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = safeBatchTransferFromValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for safeTransferFrom
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call safeTransferFromCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/safe-transfer-from"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call safeTransferFromValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling safeTransferFrom(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling safeTransferFrom(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling safeTransferFrom(Async)");
        }

        return safeTransferFromCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse safeTransferFrom(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = safeTransferFromWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> safeTransferFromWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = safeTransferFromValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call safeTransferFromAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = safeTransferFromValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setApprovalForAll
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApprovalForAllCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = erc1155Request;

        // create path and map variables
        String localVarPath = "/erc1155/{name}/set-approval-for-all"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setApprovalForAllValidateBeforeCall(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setApprovalForAll(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling setApprovalForAll(Async)");
        }

        // verify the required parameter 'erc1155Request' is set
        if (erc1155Request == null) {
            throw new ApiException("Missing the required parameter 'erc1155Request' when calling setApprovalForAll(Async)");
        }

        return setApprovalForAllCall(name, authorization, erc1155Request, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return TransactionAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TransactionAPIResponse setApprovalForAll(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        ApiResponse<TransactionAPIResponse> localVarResp = setApprovalForAllWithHttpInfo(name, authorization, erc1155Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @return ApiResponse&lt;TransactionAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionAPIResponse> setApprovalForAllWithHttpInfo(String name, String authorization, Erc1155Request erc1155Request) throws ApiException {
        okhttp3.Call localVarCall = setApprovalForAllValidateBeforeCall(name, authorization, erc1155Request, null);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (required)
     * @param erc1155Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApprovalForAllAsync(String name, String authorization, Erc1155Request erc1155Request, final ApiCallback<TransactionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setApprovalForAllValidateBeforeCall(name, authorization, erc1155Request, _callback);
        Type localVarReturnType = new TypeToken<TransactionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
