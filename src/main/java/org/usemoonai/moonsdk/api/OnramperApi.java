/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.api;

import org.usemoonai.moonsdk.client.ApiCallback;
import org.usemoonai.moonsdk.client.ApiClient;
import org.usemoonai.moonsdk.client.ApiException;
import org.usemoonai.moonsdk.client.ApiResponse;
import org.usemoonai.moonsdk.client.Configuration;
import org.usemoonai.moonsdk.client.Pair;
import org.usemoonai.moonsdk.client.ProgressRequestBody;
import org.usemoonai.moonsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.usemoonai.moonsdk.models.GetSupportedOnRampsResponse;
import org.usemoonai.moonsdk.models.Quote;
import org.usemoonai.moonsdk.models.SellQuote;
import org.usemoonai.moonsdk.models.SupportedAssetResponse;
import org.usemoonai.moonsdk.models.SupportedCurrenciesResponse;
import org.usemoonai.moonsdk.models.SupportedDefaultResponse;
import org.usemoonai.moonsdk.models.SupportedPaymentTypesCurrencyResponse;
import org.usemoonai.moonsdk.models.TransactionInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnramperApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnramperApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnramperApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for onRamperCheckout
     * @param authorization  (required)
     * @param accountName  (required)
     * @param transactionInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperCheckoutCall(String authorization, String accountName, TransactionInput transactionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionInput;

        // create path and map variables
        String localVarPath = "/onramper/fund/${accountName}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperCheckoutValidateBeforeCall(String authorization, String accountName, TransactionInput transactionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperCheckout(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling onRamperCheckout(Async)");
        }

        // verify the required parameter 'transactionInput' is set
        if (transactionInput == null) {
            throw new ApiException("Missing the required parameter 'transactionInput' when calling onRamperCheckout(Async)");
        }

        return onRamperCheckoutCall(authorization, accountName, transactionInput, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param accountName  (required)
     * @param transactionInput  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public Object onRamperCheckout(String authorization, String accountName, TransactionInput transactionInput) throws ApiException {
        ApiResponse<Object> localVarResp = onRamperCheckoutWithHttpInfo(authorization, accountName, transactionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param accountName  (required)
     * @param transactionInput  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> onRamperCheckoutWithHttpInfo(String authorization, String accountName, TransactionInput transactionInput) throws ApiException {
        okhttp3.Call localVarCall = onRamperCheckoutValidateBeforeCall(authorization, accountName, transactionInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param accountName  (required)
     * @param transactionInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperCheckoutAsync(String authorization, String accountName, TransactionInput transactionInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperCheckoutValidateBeforeCall(authorization, accountName, transactionInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetQuotesBuy
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetQuotesBuyCall(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/quotes/buy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (crypto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crypto", crypto));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (paymentMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMethod", paymentMethod));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientName", clientName));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetQuotesBuyValidateBeforeCall(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetQuotesBuy(Async)");
        }

        // verify the required parameter 'fiat' is set
        if (fiat == null) {
            throw new ApiException("Missing the required parameter 'fiat' when calling onRamperGetQuotesBuy(Async)");
        }

        // verify the required parameter 'crypto' is set
        if (crypto == null) {
            throw new ApiException("Missing the required parameter 'crypto' when calling onRamperGetQuotesBuy(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling onRamperGetQuotesBuy(Async)");
        }

        return onRamperGetQuotesBuyCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @return List&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public List<Quote> onRamperGetQuotesBuy(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country) throws ApiException {
        ApiResponse<List<Quote>> localVarResp = onRamperGetQuotesBuyWithHttpInfo(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @return ApiResponse&lt;List&lt;Quote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Quote>> onRamperGetQuotesBuyWithHttpInfo(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetQuotesBuyValidateBeforeCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, null);
        Type localVarReturnType = new TypeToken<List<Quote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetQuotesBuyAsync(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback<List<Quote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetQuotesBuyValidateBeforeCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, _callback);
        Type localVarReturnType = new TypeToken<List<Quote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetQuotesSell
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetQuotesSellCall(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/quotes/sell";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (crypto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crypto", crypto));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (paymentMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMethod", paymentMethod));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientName", clientName));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetQuotesSellValidateBeforeCall(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetQuotesSell(Async)");
        }

        // verify the required parameter 'fiat' is set
        if (fiat == null) {
            throw new ApiException("Missing the required parameter 'fiat' when calling onRamperGetQuotesSell(Async)");
        }

        // verify the required parameter 'crypto' is set
        if (crypto == null) {
            throw new ApiException("Missing the required parameter 'crypto' when calling onRamperGetQuotesSell(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling onRamperGetQuotesSell(Async)");
        }

        return onRamperGetQuotesSellCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @return List&lt;SellQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public List<SellQuote> onRamperGetQuotesSell(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country) throws ApiException {
        ApiResponse<List<SellQuote>> localVarResp = onRamperGetQuotesSellWithHttpInfo(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @return ApiResponse&lt;List&lt;SellQuote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellQuote>> onRamperGetQuotesSellWithHttpInfo(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetQuotesSellValidateBeforeCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, null);
        Type localVarReturnType = new TypeToken<List<SellQuote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param crypto  (required)
     * @param amount  (required)
     * @param paymentMethod  (optional, default to creditcard)
     * @param uuid  (optional, default to )
     * @param clientName  (optional, default to )
     * @param country  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetQuotesSellAsync(String authorization, String fiat, String crypto, Double amount, String paymentMethod, String uuid, String clientName, String country, final ApiCallback<List<SellQuote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetQuotesSellValidateBeforeCall(authorization, fiat, crypto, amount, paymentMethod, uuid, clientName, country, _callback);
        Type localVarReturnType = new TypeToken<List<SellQuote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedAssets
     * @param authorization  (required)
     * @param source  (required)
     * @param country  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedAssetsCall(String authorization, String source, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedAssetsValidateBeforeCall(String authorization, String source, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedAssets(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling onRamperGetSupportedAssets(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling onRamperGetSupportedAssets(Async)");
        }

        return onRamperGetSupportedAssetsCall(authorization, source, country, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param source  (required)
     * @param country  (required)
     * @return SupportedAssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public SupportedAssetResponse onRamperGetSupportedAssets(String authorization, String source, String country) throws ApiException {
        ApiResponse<SupportedAssetResponse> localVarResp = onRamperGetSupportedAssetsWithHttpInfo(authorization, source, country);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param source  (required)
     * @param country  (required)
     * @return ApiResponse&lt;SupportedAssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedAssetResponse> onRamperGetSupportedAssetsWithHttpInfo(String authorization, String source, String country) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedAssetsValidateBeforeCall(authorization, source, country, null);
        Type localVarReturnType = new TypeToken<SupportedAssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param source  (required)
     * @param country  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedAssetsAsync(String authorization, String source, String country, final ApiCallback<SupportedAssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedAssetsValidateBeforeCall(authorization, source, country, _callback);
        Type localVarReturnType = new TypeToken<SupportedAssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedCurrencies
     * @param authorization  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedCurrenciesCall(String authorization, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedCurrenciesValidateBeforeCall(String authorization, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedCurrencies(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling onRamperGetSupportedCurrencies(Async)");
        }

        return onRamperGetSupportedCurrenciesCall(authorization, type, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param type  (required)
     * @return SupportedCurrenciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public SupportedCurrenciesResponse onRamperGetSupportedCurrencies(String authorization, String type) throws ApiException {
        ApiResponse<SupportedCurrenciesResponse> localVarResp = onRamperGetSupportedCurrenciesWithHttpInfo(authorization, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param type  (required)
     * @return ApiResponse&lt;SupportedCurrenciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedCurrenciesResponse> onRamperGetSupportedCurrenciesWithHttpInfo(String authorization, String type) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedCurrenciesValidateBeforeCall(authorization, type, null);
        Type localVarReturnType = new TypeToken<SupportedCurrenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedCurrenciesAsync(String authorization, String type, final ApiCallback<SupportedCurrenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedCurrenciesValidateBeforeCall(authorization, type, _callback);
        Type localVarReturnType = new TypeToken<SupportedCurrenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedDefaultsAll
     * @param authorization  (required)
     * @param country  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedDefaultsAllCall(String authorization, String country, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedDefaultsAllValidateBeforeCall(String authorization, String country, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedDefaultsAll(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling onRamperGetSupportedDefaultsAll(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling onRamperGetSupportedDefaultsAll(Async)");
        }

        return onRamperGetSupportedDefaultsAllCall(authorization, country, type, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param country  (required)
     * @param type  (required)
     * @return SupportedDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public SupportedDefaultResponse onRamperGetSupportedDefaultsAll(String authorization, String country, String type) throws ApiException {
        ApiResponse<SupportedDefaultResponse> localVarResp = onRamperGetSupportedDefaultsAllWithHttpInfo(authorization, country, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param country  (required)
     * @param type  (required)
     * @return ApiResponse&lt;SupportedDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedDefaultResponse> onRamperGetSupportedDefaultsAllWithHttpInfo(String authorization, String country, String type) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedDefaultsAllValidateBeforeCall(authorization, country, type, null);
        Type localVarReturnType = new TypeToken<SupportedDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param country  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedDefaultsAllAsync(String authorization, String country, String type, final ApiCallback<SupportedDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedDefaultsAllValidateBeforeCall(authorization, country, type, _callback);
        Type localVarReturnType = new TypeToken<SupportedDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedOnRampsAll
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedOnRampsAllCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/onramps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedOnRampsAllValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedOnRampsAll(Async)");
        }

        return onRamperGetSupportedOnRampsAllCall(authorization, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return GetSupportedOnRampsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetSupportedOnRampsResponse onRamperGetSupportedOnRampsAll(String authorization) throws ApiException {
        ApiResponse<GetSupportedOnRampsResponse> localVarResp = onRamperGetSupportedOnRampsAllWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;GetSupportedOnRampsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSupportedOnRampsResponse> onRamperGetSupportedOnRampsAllWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedOnRampsAllValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<GetSupportedOnRampsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedOnRampsAllAsync(String authorization, final ApiCallback<GetSupportedOnRampsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedOnRampsAllValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<GetSupportedOnRampsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedPaymentTypes
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedPaymentTypesCall(String authorization, String fiat, String country, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/payment-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedPaymentTypesValidateBeforeCall(String authorization, String fiat, String country, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedPaymentTypes(Async)");
        }

        // verify the required parameter 'fiat' is set
        if (fiat == null) {
            throw new ApiException("Missing the required parameter 'fiat' when calling onRamperGetSupportedPaymentTypes(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling onRamperGetSupportedPaymentTypes(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling onRamperGetSupportedPaymentTypes(Async)");
        }

        return onRamperGetSupportedPaymentTypesCall(authorization, fiat, country, type, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param type  (required)
     * @return SupportedPaymentTypesCurrencyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public SupportedPaymentTypesCurrencyResponse onRamperGetSupportedPaymentTypes(String authorization, String fiat, String country, String type) throws ApiException {
        ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResp = onRamperGetSupportedPaymentTypesWithHttpInfo(authorization, fiat, country, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param type  (required)
     * @return ApiResponse&lt;SupportedPaymentTypesCurrencyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedPaymentTypesCurrencyResponse> onRamperGetSupportedPaymentTypesWithHttpInfo(String authorization, String fiat, String country, String type) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedPaymentTypesValidateBeforeCall(authorization, fiat, country, type, null);
        Type localVarReturnType = new TypeToken<SupportedPaymentTypesCurrencyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedPaymentTypesAsync(String authorization, String fiat, String country, String type, final ApiCallback<SupportedPaymentTypesCurrencyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedPaymentTypesValidateBeforeCall(authorization, fiat, country, type, _callback);
        Type localVarReturnType = new TypeToken<SupportedPaymentTypesCurrencyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onRamperGetSupportedPaymentTypesFiat
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedPaymentTypesFiatCall(String authorization, String fiat, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onramper/payment-types/fiat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onRamperGetSupportedPaymentTypesFiatValidateBeforeCall(String authorization, String fiat, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling onRamperGetSupportedPaymentTypesFiat(Async)");
        }

        // verify the required parameter 'fiat' is set
        if (fiat == null) {
            throw new ApiException("Missing the required parameter 'fiat' when calling onRamperGetSupportedPaymentTypesFiat(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling onRamperGetSupportedPaymentTypesFiat(Async)");
        }

        return onRamperGetSupportedPaymentTypesFiatCall(authorization, fiat, country, _callback);

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @return SupportedPaymentTypesCurrencyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public SupportedPaymentTypesCurrencyResponse onRamperGetSupportedPaymentTypesFiat(String authorization, String fiat, String country) throws ApiException {
        ApiResponse<SupportedPaymentTypesCurrencyResponse> localVarResp = onRamperGetSupportedPaymentTypesFiatWithHttpInfo(authorization, fiat, country);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @return ApiResponse&lt;SupportedPaymentTypesCurrencyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedPaymentTypesCurrencyResponse> onRamperGetSupportedPaymentTypesFiatWithHttpInfo(String authorization, String fiat, String country) throws ApiException {
        okhttp3.Call localVarCall = onRamperGetSupportedPaymentTypesFiatValidateBeforeCall(authorization, fiat, country, null);
        Type localVarReturnType = new TypeToken<SupportedPaymentTypesCurrencyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param fiat  (required)
     * @param country  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onRamperGetSupportedPaymentTypesFiatAsync(String authorization, String fiat, String country, final ApiCallback<SupportedPaymentTypesCurrencyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = onRamperGetSupportedPaymentTypesFiatValidateBeforeCall(authorization, fiat, country, _callback);
        Type localVarReturnType = new TypeToken<SupportedPaymentTypesCurrencyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
