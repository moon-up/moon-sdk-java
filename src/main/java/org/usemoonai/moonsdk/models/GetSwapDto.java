/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * GetSwapDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class GetSwapDto {
  public static final String SERIALIZED_NAME_SRC = "src";
  @SerializedName(SERIALIZED_NAME_SRC)
  private String src;

  public static final String SERIALIZED_NAME_DST = "dst";
  @SerializedName(SERIALIZED_NAME_DST)
  private String dst;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_SLIPPAGE = "slippage";
  @SerializedName(SERIALIZED_NAME_SLIPPAGE)
  private Double slippage;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private String protocols;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private String fee;

  public static final String SERIALIZED_NAME_DISABLE_ESTIMATE = "disableEstimate";
  @SerializedName(SERIALIZED_NAME_DISABLE_ESTIMATE)
  private Boolean disableEstimate;

  public static final String SERIALIZED_NAME_PERMIT = "permit";
  @SerializedName(SERIALIZED_NAME_PERMIT)
  private String permit;

  public static final String SERIALIZED_NAME_INCLUDE_TOKENS_INFO = "includeTokensInfo";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TOKENS_INFO)
  private Boolean includeTokensInfo;

  public static final String SERIALIZED_NAME_INCLUDE_PROTOCOLS = "includeProtocols";
  @SerializedName(SERIALIZED_NAME_INCLUDE_PROTOCOLS)
  private Boolean includeProtocols;

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private Boolean compatibility;

  public static final String SERIALIZED_NAME_ALLOW_PARTIAL_FILL = "allowPartialFill";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIAL_FILL)
  private Boolean allowPartialFill;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private String parts;

  public static final String SERIALIZED_NAME_MAIN_ROUTE_PARTS = "mainRouteParts";
  @SerializedName(SERIALIZED_NAME_MAIN_ROUTE_PARTS)
  private String mainRouteParts;

  public static final String SERIALIZED_NAME_CONNECTOR_TOKENS = "connectorTokens";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TOKENS)
  private String connectorTokens;

  public static final String SERIALIZED_NAME_COMPLEXITY_LEVEL = "complexityLevel";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY_LEVEL)
  private String complexityLevel;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gasLimit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gasPrice";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private String gasPrice;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private String receiver;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chainId";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private Double chainId;

  public GetSwapDto() {
  }

  public GetSwapDto src(String src) {
    this.src = src;
    return this;
  }

   /**
   * Get src
   * @return src
  **/
  @javax.annotation.Nonnull
  public String getSrc() {
    return src;
  }

  public void setSrc(String src) {
    this.src = src;
  }


  public GetSwapDto dst(String dst) {
    this.dst = dst;
    return this;
  }

   /**
   * Get dst
   * @return dst
  **/
  @javax.annotation.Nonnull
  public String getDst() {
    return dst;
  }

  public void setDst(String dst) {
    this.dst = dst;
  }


  public GetSwapDto amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public GetSwapDto from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public GetSwapDto slippage(Double slippage) {
    this.slippage = slippage;
    return this;
  }

   /**
   * Get slippage
   * @return slippage
  **/
  @javax.annotation.Nonnull
  public Double getSlippage() {
    return slippage;
  }

  public void setSlippage(Double slippage) {
    this.slippage = slippage;
  }


  public GetSwapDto protocols(String protocols) {
    this.protocols = protocols;
    return this;
  }

   /**
   * Get protocols
   * @return protocols
  **/
  @javax.annotation.Nullable
  public String getProtocols() {
    return protocols;
  }

  public void setProtocols(String protocols) {
    this.protocols = protocols;
  }


  public GetSwapDto fee(String fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nullable
  public String getFee() {
    return fee;
  }

  public void setFee(String fee) {
    this.fee = fee;
  }


  public GetSwapDto disableEstimate(Boolean disableEstimate) {
    this.disableEstimate = disableEstimate;
    return this;
  }

   /**
   * Get disableEstimate
   * @return disableEstimate
  **/
  @javax.annotation.Nullable
  public Boolean getDisableEstimate() {
    return disableEstimate;
  }

  public void setDisableEstimate(Boolean disableEstimate) {
    this.disableEstimate = disableEstimate;
  }


  public GetSwapDto permit(String permit) {
    this.permit = permit;
    return this;
  }

   /**
   * Get permit
   * @return permit
  **/
  @javax.annotation.Nullable
  public String getPermit() {
    return permit;
  }

  public void setPermit(String permit) {
    this.permit = permit;
  }


  public GetSwapDto includeTokensInfo(Boolean includeTokensInfo) {
    this.includeTokensInfo = includeTokensInfo;
    return this;
  }

   /**
   * Get includeTokensInfo
   * @return includeTokensInfo
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeTokensInfo() {
    return includeTokensInfo;
  }

  public void setIncludeTokensInfo(Boolean includeTokensInfo) {
    this.includeTokensInfo = includeTokensInfo;
  }


  public GetSwapDto includeProtocols(Boolean includeProtocols) {
    this.includeProtocols = includeProtocols;
    return this;
  }

   /**
   * Get includeProtocols
   * @return includeProtocols
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeProtocols() {
    return includeProtocols;
  }

  public void setIncludeProtocols(Boolean includeProtocols) {
    this.includeProtocols = includeProtocols;
  }


  public GetSwapDto compatibility(Boolean compatibility) {
    this.compatibility = compatibility;
    return this;
  }

   /**
   * Get compatibility
   * @return compatibility
  **/
  @javax.annotation.Nullable
  public Boolean getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(Boolean compatibility) {
    this.compatibility = compatibility;
  }


  public GetSwapDto allowPartialFill(Boolean allowPartialFill) {
    this.allowPartialFill = allowPartialFill;
    return this;
  }

   /**
   * Get allowPartialFill
   * @return allowPartialFill
  **/
  @javax.annotation.Nullable
  public Boolean getAllowPartialFill() {
    return allowPartialFill;
  }

  public void setAllowPartialFill(Boolean allowPartialFill) {
    this.allowPartialFill = allowPartialFill;
  }


  public GetSwapDto parts(String parts) {
    this.parts = parts;
    return this;
  }

   /**
   * Get parts
   * @return parts
  **/
  @javax.annotation.Nullable
  public String getParts() {
    return parts;
  }

  public void setParts(String parts) {
    this.parts = parts;
  }


  public GetSwapDto mainRouteParts(String mainRouteParts) {
    this.mainRouteParts = mainRouteParts;
    return this;
  }

   /**
   * Get mainRouteParts
   * @return mainRouteParts
  **/
  @javax.annotation.Nullable
  public String getMainRouteParts() {
    return mainRouteParts;
  }

  public void setMainRouteParts(String mainRouteParts) {
    this.mainRouteParts = mainRouteParts;
  }


  public GetSwapDto connectorTokens(String connectorTokens) {
    this.connectorTokens = connectorTokens;
    return this;
  }

   /**
   * Get connectorTokens
   * @return connectorTokens
  **/
  @javax.annotation.Nullable
  public String getConnectorTokens() {
    return connectorTokens;
  }

  public void setConnectorTokens(String connectorTokens) {
    this.connectorTokens = connectorTokens;
  }


  public GetSwapDto complexityLevel(String complexityLevel) {
    this.complexityLevel = complexityLevel;
    return this;
  }

   /**
   * Get complexityLevel
   * @return complexityLevel
  **/
  @javax.annotation.Nullable
  public String getComplexityLevel() {
    return complexityLevel;
  }

  public void setComplexityLevel(String complexityLevel) {
    this.complexityLevel = complexityLevel;
  }


  public GetSwapDto gasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
    return this;
  }

   /**
   * Get gasLimit
   * @return gasLimit
  **/
  @javax.annotation.Nullable
  public String getGasLimit() {
    return gasLimit;
  }

  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public GetSwapDto gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * Get gasPrice
   * @return gasPrice
  **/
  @javax.annotation.Nullable
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  public GetSwapDto referrer(String referrer) {
    this.referrer = referrer;
    return this;
  }

   /**
   * Get referrer
   * @return referrer
  **/
  @javax.annotation.Nullable
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public GetSwapDto receiver(String receiver) {
    this.receiver = receiver;
    return this;
  }

   /**
   * Get receiver
   * @return receiver
  **/
  @javax.annotation.Nullable
  public String getReceiver() {
    return receiver;
  }

  public void setReceiver(String receiver) {
    this.receiver = receiver;
  }


  public GetSwapDto chainId(Double chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * Get chainId
   * @return chainId
  **/
  @javax.annotation.Nullable
  public Double getChainId() {
    return chainId;
  }

  public void setChainId(Double chainId) {
    this.chainId = chainId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSwapDto getSwapDto = (GetSwapDto) o;
    return Objects.equals(this.src, getSwapDto.src) &&
        Objects.equals(this.dst, getSwapDto.dst) &&
        Objects.equals(this.amount, getSwapDto.amount) &&
        Objects.equals(this.from, getSwapDto.from) &&
        Objects.equals(this.slippage, getSwapDto.slippage) &&
        Objects.equals(this.protocols, getSwapDto.protocols) &&
        Objects.equals(this.fee, getSwapDto.fee) &&
        Objects.equals(this.disableEstimate, getSwapDto.disableEstimate) &&
        Objects.equals(this.permit, getSwapDto.permit) &&
        Objects.equals(this.includeTokensInfo, getSwapDto.includeTokensInfo) &&
        Objects.equals(this.includeProtocols, getSwapDto.includeProtocols) &&
        Objects.equals(this.compatibility, getSwapDto.compatibility) &&
        Objects.equals(this.allowPartialFill, getSwapDto.allowPartialFill) &&
        Objects.equals(this.parts, getSwapDto.parts) &&
        Objects.equals(this.mainRouteParts, getSwapDto.mainRouteParts) &&
        Objects.equals(this.connectorTokens, getSwapDto.connectorTokens) &&
        Objects.equals(this.complexityLevel, getSwapDto.complexityLevel) &&
        Objects.equals(this.gasLimit, getSwapDto.gasLimit) &&
        Objects.equals(this.gasPrice, getSwapDto.gasPrice) &&
        Objects.equals(this.referrer, getSwapDto.referrer) &&
        Objects.equals(this.receiver, getSwapDto.receiver) &&
        Objects.equals(this.chainId, getSwapDto.chainId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(src, dst, amount, from, slippage, protocols, fee, disableEstimate, permit, includeTokensInfo, includeProtocols, compatibility, allowPartialFill, parts, mainRouteParts, connectorTokens, complexityLevel, gasLimit, gasPrice, referrer, receiver, chainId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSwapDto {\n");
    sb.append("    src: ").append(toIndentedString(src)).append("\n");
    sb.append("    dst: ").append(toIndentedString(dst)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    slippage: ").append(toIndentedString(slippage)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    disableEstimate: ").append(toIndentedString(disableEstimate)).append("\n");
    sb.append("    permit: ").append(toIndentedString(permit)).append("\n");
    sb.append("    includeTokensInfo: ").append(toIndentedString(includeTokensInfo)).append("\n");
    sb.append("    includeProtocols: ").append(toIndentedString(includeProtocols)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    allowPartialFill: ").append(toIndentedString(allowPartialFill)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    mainRouteParts: ").append(toIndentedString(mainRouteParts)).append("\n");
    sb.append("    connectorTokens: ").append(toIndentedString(connectorTokens)).append("\n");
    sb.append("    complexityLevel: ").append(toIndentedString(complexityLevel)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("src");
    openapiFields.add("dst");
    openapiFields.add("amount");
    openapiFields.add("from");
    openapiFields.add("slippage");
    openapiFields.add("protocols");
    openapiFields.add("fee");
    openapiFields.add("disableEstimate");
    openapiFields.add("permit");
    openapiFields.add("includeTokensInfo");
    openapiFields.add("includeProtocols");
    openapiFields.add("compatibility");
    openapiFields.add("allowPartialFill");
    openapiFields.add("parts");
    openapiFields.add("mainRouteParts");
    openapiFields.add("connectorTokens");
    openapiFields.add("complexityLevel");
    openapiFields.add("gasLimit");
    openapiFields.add("gasPrice");
    openapiFields.add("referrer");
    openapiFields.add("receiver");
    openapiFields.add("chainId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("src");
    openapiRequiredFields.add("dst");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("slippage");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetSwapDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSwapDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSwapDto is not found in the empty JSON string", GetSwapDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSwapDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSwapDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSwapDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("src").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `src` to be a primitive type in the JSON string but got `%s`", jsonObj.get("src").toString()));
      }
      if (!jsonObj.get("dst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dst").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull()) && !jsonObj.get("protocols").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if ((jsonObj.get("permit") != null && !jsonObj.get("permit").isJsonNull()) && !jsonObj.get("permit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit").toString()));
      }
      if ((jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull()) && !jsonObj.get("parts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parts").toString()));
      }
      if ((jsonObj.get("mainRouteParts") != null && !jsonObj.get("mainRouteParts").isJsonNull()) && !jsonObj.get("mainRouteParts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainRouteParts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainRouteParts").toString()));
      }
      if ((jsonObj.get("connectorTokens") != null && !jsonObj.get("connectorTokens").isJsonNull()) && !jsonObj.get("connectorTokens").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorTokens` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorTokens").toString()));
      }
      if ((jsonObj.get("complexityLevel") != null && !jsonObj.get("complexityLevel").isJsonNull()) && !jsonObj.get("complexityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complexityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complexityLevel").toString()));
      }
      if ((jsonObj.get("gasLimit") != null && !jsonObj.get("gasLimit").isJsonNull()) && !jsonObj.get("gasLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasLimit").toString()));
      }
      if ((jsonObj.get("gasPrice") != null && !jsonObj.get("gasPrice").isJsonNull()) && !jsonObj.get("gasPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasPrice").toString()));
      }
      if ((jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if ((jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) && !jsonObj.get("receiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSwapDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSwapDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSwapDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSwapDto.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSwapDto>() {
           @Override
           public void write(JsonWriter out, GetSwapDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSwapDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetSwapDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetSwapDto
  * @throws IOException if the JSON string is invalid with respect to GetSwapDto
  */
  public static GetSwapDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSwapDto.class);
  }

 /**
  * Convert an instance of GetSwapDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

