/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.usemoonai.moonsdk.models.INFTApprovalERC1155;
import org.usemoonai.moonsdk.models.INFTApprovalERC721;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * IOldNFTApproval
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class IOldNFTApproval {
  public static final String SERIALIZED_NAME_E_R_C721 = "ERC721";
  @SerializedName(SERIALIZED_NAME_E_R_C721)
  private List<INFTApprovalERC721> ERC721 = new ArrayList<>();

  public static final String SERIALIZED_NAME_E_R_C1155 = "ERC1155";
  @SerializedName(SERIALIZED_NAME_E_R_C1155)
  private List<INFTApprovalERC1155> ERC1155 = new ArrayList<>();

  public IOldNFTApproval() {
  }

  public IOldNFTApproval ERC721(List<INFTApprovalERC721> ERC721) {
    this.ERC721 = ERC721;
    return this;
  }

  public IOldNFTApproval addERC721Item(INFTApprovalERC721 ERC721Item) {
    if (this.ERC721 == null) {
      this.ERC721 = new ArrayList<>();
    }
    this.ERC721.add(ERC721Item);
    return this;
  }

   /**
   * Get ERC721
   * @return ERC721
  **/
  @javax.annotation.Nonnull
  public List<INFTApprovalERC721> getERC721() {
    return ERC721;
  }

  public void setERC721(List<INFTApprovalERC721> ERC721) {
    this.ERC721 = ERC721;
  }


  public IOldNFTApproval ERC1155(List<INFTApprovalERC1155> ERC1155) {
    this.ERC1155 = ERC1155;
    return this;
  }

  public IOldNFTApproval addERC1155Item(INFTApprovalERC1155 ERC1155Item) {
    if (this.ERC1155 == null) {
      this.ERC1155 = new ArrayList<>();
    }
    this.ERC1155.add(ERC1155Item);
    return this;
  }

   /**
   * Get ERC1155
   * @return ERC1155
  **/
  @javax.annotation.Nonnull
  public List<INFTApprovalERC1155> getERC1155() {
    return ERC1155;
  }

  public void setERC1155(List<INFTApprovalERC1155> ERC1155) {
    this.ERC1155 = ERC1155;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IOldNFTApproval ioldNFTApproval = (IOldNFTApproval) o;
    return Objects.equals(this.ERC721, ioldNFTApproval.ERC721) &&
        Objects.equals(this.ERC1155, ioldNFTApproval.ERC1155);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ERC721, ERC1155);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IOldNFTApproval {\n");
    sb.append("    ERC721: ").append(toIndentedString(ERC721)).append("\n");
    sb.append("    ERC1155: ").append(toIndentedString(ERC1155)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ERC721");
    openapiFields.add("ERC1155");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ERC721");
    openapiRequiredFields.add("ERC1155");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IOldNFTApproval
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IOldNFTApproval.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IOldNFTApproval is not found in the empty JSON string", IOldNFTApproval.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IOldNFTApproval.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IOldNFTApproval` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IOldNFTApproval.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("ERC721").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ERC721` to be an array in the JSON string but got `%s`", jsonObj.get("ERC721").toString()));
      }

      JsonArray jsonArrayERC721 = jsonObj.getAsJsonArray("ERC721");
      // validate the required field `ERC721` (array)
      for (int i = 0; i < jsonArrayERC721.size(); i++) {
        INFTApprovalERC721.validateJsonElement(jsonArrayERC721.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("ERC1155").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ERC1155` to be an array in the JSON string but got `%s`", jsonObj.get("ERC1155").toString()));
      }

      JsonArray jsonArrayERC1155 = jsonObj.getAsJsonArray("ERC1155");
      // validate the required field `ERC1155` (array)
      for (int i = 0; i < jsonArrayERC1155.size(); i++) {
        INFTApprovalERC1155.validateJsonElement(jsonArrayERC1155.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IOldNFTApproval.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IOldNFTApproval' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IOldNFTApproval> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IOldNFTApproval.class));

       return (TypeAdapter<T>) new TypeAdapter<IOldNFTApproval>() {
           @Override
           public void write(JsonWriter out, IOldNFTApproval value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IOldNFTApproval read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IOldNFTApproval given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IOldNFTApproval
  * @throws IOException if the JSON string is invalid with respect to IOldNFTApproval
  */
  public static IOldNFTApproval fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IOldNFTApproval.class);
  }

 /**
  * Convert an instance of IOldNFTApproval to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

