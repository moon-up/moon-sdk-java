/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * SupportedAssetResponseAssetsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class SupportedAssetResponseAssetsInner {
  public static final String SERIALIZED_NAME_CRYPTO = "crypto";
  @SerializedName(SERIALIZED_NAME_CRYPTO)
  private List<String> crypto = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<String> paymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIAT = "fiat";
  @SerializedName(SERIALIZED_NAME_FIAT)
  private String fiat;

  public SupportedAssetResponseAssetsInner() {
  }

  public SupportedAssetResponseAssetsInner crypto(List<String> crypto) {
    this.crypto = crypto;
    return this;
  }

  public SupportedAssetResponseAssetsInner addCryptoItem(String cryptoItem) {
    if (this.crypto == null) {
      this.crypto = new ArrayList<>();
    }
    this.crypto.add(cryptoItem);
    return this;
  }

   /**
   * Get crypto
   * @return crypto
  **/
  @javax.annotation.Nonnull
  public List<String> getCrypto() {
    return crypto;
  }

  public void setCrypto(List<String> crypto) {
    this.crypto = crypto;
  }


  public SupportedAssetResponseAssetsInner paymentMethods(List<String> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public SupportedAssetResponseAssetsInner addPaymentMethodsItem(String paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

   /**
   * Get paymentMethods
   * @return paymentMethods
  **/
  @javax.annotation.Nonnull
  public List<String> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<String> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public SupportedAssetResponseAssetsInner fiat(String fiat) {
    this.fiat = fiat;
    return this;
  }

   /**
   * Get fiat
   * @return fiat
  **/
  @javax.annotation.Nonnull
  public String getFiat() {
    return fiat;
  }

  public void setFiat(String fiat) {
    this.fiat = fiat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedAssetResponseAssetsInner supportedAssetResponseAssetsInner = (SupportedAssetResponseAssetsInner) o;
    return Objects.equals(this.crypto, supportedAssetResponseAssetsInner.crypto) &&
        Objects.equals(this.paymentMethods, supportedAssetResponseAssetsInner.paymentMethods) &&
        Objects.equals(this.fiat, supportedAssetResponseAssetsInner.fiat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crypto, paymentMethods, fiat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedAssetResponseAssetsInner {\n");
    sb.append("    crypto: ").append(toIndentedString(crypto)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    fiat: ").append(toIndentedString(fiat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crypto");
    openapiFields.add("paymentMethods");
    openapiFields.add("fiat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("crypto");
    openapiRequiredFields.add("paymentMethods");
    openapiRequiredFields.add("fiat");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SupportedAssetResponseAssetsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportedAssetResponseAssetsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportedAssetResponseAssetsInner is not found in the empty JSON string", SupportedAssetResponseAssetsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportedAssetResponseAssetsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportedAssetResponseAssetsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupportedAssetResponseAssetsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("crypto") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("crypto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `crypto` to be an array in the JSON string but got `%s`", jsonObj.get("crypto").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("paymentMethods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("paymentMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
      }
      if (!jsonObj.get("fiat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportedAssetResponseAssetsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportedAssetResponseAssetsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportedAssetResponseAssetsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportedAssetResponseAssetsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportedAssetResponseAssetsInner>() {
           @Override
           public void write(JsonWriter out, SupportedAssetResponseAssetsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportedAssetResponseAssetsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SupportedAssetResponseAssetsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SupportedAssetResponseAssetsInner
  * @throws IOException if the JSON string is invalid with respect to SupportedAssetResponseAssetsInner
  */
  public static SupportedAssetResponseAssetsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportedAssetResponseAssetsInner.class);
  }

 /**
  * Convert an instance of SupportedAssetResponseAssetsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

