/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * TransactionInputSupportedParamsTheme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-18T13:51:42.356170421+10:00[Australia/Brisbane]")
public class TransactionInputSupportedParamsTheme {
  public static final String SERIALIZED_NAME_BORDER_RADIUS = "borderRadius";
  @SerializedName(SERIALIZED_NAME_BORDER_RADIUS)
  private Double borderRadius;

  public static final String SERIALIZED_NAME_CARD_COLOR = "cardColor";
  @SerializedName(SERIALIZED_NAME_CARD_COLOR)
  private String cardColor;

  public static final String SERIALIZED_NAME_SECONDARY_TEXT_COLOR = "secondaryTextColor";
  @SerializedName(SERIALIZED_NAME_SECONDARY_TEXT_COLOR)
  private String secondaryTextColor;

  public static final String SERIALIZED_NAME_PRIMARY_TEXT_COLOR = "primaryTextColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TEXT_COLOR)
  private String primaryTextColor;

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "secondaryColor";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "primaryColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_THEME_NAME = "themeName";
  @SerializedName(SERIALIZED_NAME_THEME_NAME)
  private String themeName;

  public static final String SERIALIZED_NAME_IS_DARK = "isDark";
  @SerializedName(SERIALIZED_NAME_IS_DARK)
  private Boolean isDark;

  public TransactionInputSupportedParamsTheme() {
  }

  public TransactionInputSupportedParamsTheme borderRadius(Double borderRadius) {
    this.borderRadius = borderRadius;
    return this;
  }

   /**
   * Get borderRadius
   * @return borderRadius
  **/
  @javax.annotation.Nullable
  public Double getBorderRadius() {
    return borderRadius;
  }

  public void setBorderRadius(Double borderRadius) {
    this.borderRadius = borderRadius;
  }


  public TransactionInputSupportedParamsTheme cardColor(String cardColor) {
    this.cardColor = cardColor;
    return this;
  }

   /**
   * Get cardColor
   * @return cardColor
  **/
  @javax.annotation.Nonnull
  public String getCardColor() {
    return cardColor;
  }

  public void setCardColor(String cardColor) {
    this.cardColor = cardColor;
  }


  public TransactionInputSupportedParamsTheme secondaryTextColor(String secondaryTextColor) {
    this.secondaryTextColor = secondaryTextColor;
    return this;
  }

   /**
   * Get secondaryTextColor
   * @return secondaryTextColor
  **/
  @javax.annotation.Nonnull
  public String getSecondaryTextColor() {
    return secondaryTextColor;
  }

  public void setSecondaryTextColor(String secondaryTextColor) {
    this.secondaryTextColor = secondaryTextColor;
  }


  public TransactionInputSupportedParamsTheme primaryTextColor(String primaryTextColor) {
    this.primaryTextColor = primaryTextColor;
    return this;
  }

   /**
   * Get primaryTextColor
   * @return primaryTextColor
  **/
  @javax.annotation.Nonnull
  public String getPrimaryTextColor() {
    return primaryTextColor;
  }

  public void setPrimaryTextColor(String primaryTextColor) {
    this.primaryTextColor = primaryTextColor;
  }


  public TransactionInputSupportedParamsTheme secondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
    return this;
  }

   /**
   * Get secondaryColor
   * @return secondaryColor
  **/
  @javax.annotation.Nonnull
  public String getSecondaryColor() {
    return secondaryColor;
  }

  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public TransactionInputSupportedParamsTheme primaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
    return this;
  }

   /**
   * Get primaryColor
   * @return primaryColor
  **/
  @javax.annotation.Nonnull
  public String getPrimaryColor() {
    return primaryColor;
  }

  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public TransactionInputSupportedParamsTheme themeName(String themeName) {
    this.themeName = themeName;
    return this;
  }

   /**
   * Get themeName
   * @return themeName
  **/
  @javax.annotation.Nonnull
  public String getThemeName() {
    return themeName;
  }

  public void setThemeName(String themeName) {
    this.themeName = themeName;
  }


  public TransactionInputSupportedParamsTheme isDark(Boolean isDark) {
    this.isDark = isDark;
    return this;
  }

   /**
   * Get isDark
   * @return isDark
  **/
  @javax.annotation.Nonnull
  public Boolean getIsDark() {
    return isDark;
  }

  public void setIsDark(Boolean isDark) {
    this.isDark = isDark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionInputSupportedParamsTheme transactionInputSupportedParamsTheme = (TransactionInputSupportedParamsTheme) o;
    return Objects.equals(this.borderRadius, transactionInputSupportedParamsTheme.borderRadius) &&
        Objects.equals(this.cardColor, transactionInputSupportedParamsTheme.cardColor) &&
        Objects.equals(this.secondaryTextColor, transactionInputSupportedParamsTheme.secondaryTextColor) &&
        Objects.equals(this.primaryTextColor, transactionInputSupportedParamsTheme.primaryTextColor) &&
        Objects.equals(this.secondaryColor, transactionInputSupportedParamsTheme.secondaryColor) &&
        Objects.equals(this.primaryColor, transactionInputSupportedParamsTheme.primaryColor) &&
        Objects.equals(this.themeName, transactionInputSupportedParamsTheme.themeName) &&
        Objects.equals(this.isDark, transactionInputSupportedParamsTheme.isDark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(borderRadius, cardColor, secondaryTextColor, primaryTextColor, secondaryColor, primaryColor, themeName, isDark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionInputSupportedParamsTheme {\n");
    sb.append("    borderRadius: ").append(toIndentedString(borderRadius)).append("\n");
    sb.append("    cardColor: ").append(toIndentedString(cardColor)).append("\n");
    sb.append("    secondaryTextColor: ").append(toIndentedString(secondaryTextColor)).append("\n");
    sb.append("    primaryTextColor: ").append(toIndentedString(primaryTextColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    themeName: ").append(toIndentedString(themeName)).append("\n");
    sb.append("    isDark: ").append(toIndentedString(isDark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("borderRadius");
    openapiFields.add("cardColor");
    openapiFields.add("secondaryTextColor");
    openapiFields.add("primaryTextColor");
    openapiFields.add("secondaryColor");
    openapiFields.add("primaryColor");
    openapiFields.add("themeName");
    openapiFields.add("isDark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("borderRadius");
    openapiRequiredFields.add("cardColor");
    openapiRequiredFields.add("secondaryTextColor");
    openapiRequiredFields.add("primaryTextColor");
    openapiRequiredFields.add("secondaryColor");
    openapiRequiredFields.add("primaryColor");
    openapiRequiredFields.add("themeName");
    openapiRequiredFields.add("isDark");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionInputSupportedParamsTheme
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionInputSupportedParamsTheme.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionInputSupportedParamsTheme is not found in the empty JSON string", TransactionInputSupportedParamsTheme.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionInputSupportedParamsTheme.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionInputSupportedParamsTheme` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionInputSupportedParamsTheme.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cardColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardColor").toString()));
      }
      if (!jsonObj.get("secondaryTextColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryTextColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryTextColor").toString()));
      }
      if (!jsonObj.get("primaryTextColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryTextColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryTextColor").toString()));
      }
      if (!jsonObj.get("secondaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryColor").toString()));
      }
      if (!jsonObj.get("primaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryColor").toString()));
      }
      if (!jsonObj.get("themeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionInputSupportedParamsTheme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionInputSupportedParamsTheme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionInputSupportedParamsTheme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionInputSupportedParamsTheme.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionInputSupportedParamsTheme>() {
           @Override
           public void write(JsonWriter out, TransactionInputSupportedParamsTheme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionInputSupportedParamsTheme read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionInputSupportedParamsTheme given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionInputSupportedParamsTheme
  * @throws IOException if the JSON string is invalid with respect to TransactionInputSupportedParamsTheme
  */
  public static TransactionInputSupportedParamsTheme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionInputSupportedParamsTheme.class);
  }

 /**
  * Convert an instance of TransactionInputSupportedParamsTheme to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

