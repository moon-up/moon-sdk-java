/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.usemoonai.moonsdk.models.PaymentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * SupportedPaymentTypesMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class SupportedPaymentTypesMessage {
  public static final String SERIALIZED_NAME_GOOGLEPAY = "googlepay";
  @SerializedName(SERIALIZED_NAME_GOOGLEPAY)
  private PaymentType googlepay;

  public static final String SERIALIZED_NAME_APPLEPAY = "applepay";
  @SerializedName(SERIALIZED_NAME_APPLEPAY)
  private PaymentType applepay;

  public static final String SERIALIZED_NAME_CREDITCARD = "creditcard";
  @SerializedName(SERIALIZED_NAME_CREDITCARD)
  private PaymentType creditcard;

  public SupportedPaymentTypesMessage() {
  }

  public SupportedPaymentTypesMessage googlepay(PaymentType googlepay) {
    this.googlepay = googlepay;
    return this;
  }

   /**
   * Get googlepay
   * @return googlepay
  **/
  @javax.annotation.Nonnull
  public PaymentType getGooglepay() {
    return googlepay;
  }

  public void setGooglepay(PaymentType googlepay) {
    this.googlepay = googlepay;
  }


  public SupportedPaymentTypesMessage applepay(PaymentType applepay) {
    this.applepay = applepay;
    return this;
  }

   /**
   * Get applepay
   * @return applepay
  **/
  @javax.annotation.Nonnull
  public PaymentType getApplepay() {
    return applepay;
  }

  public void setApplepay(PaymentType applepay) {
    this.applepay = applepay;
  }


  public SupportedPaymentTypesMessage creditcard(PaymentType creditcard) {
    this.creditcard = creditcard;
    return this;
  }

   /**
   * Get creditcard
   * @return creditcard
  **/
  @javax.annotation.Nonnull
  public PaymentType getCreditcard() {
    return creditcard;
  }

  public void setCreditcard(PaymentType creditcard) {
    this.creditcard = creditcard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedPaymentTypesMessage supportedPaymentTypesMessage = (SupportedPaymentTypesMessage) o;
    return Objects.equals(this.googlepay, supportedPaymentTypesMessage.googlepay) &&
        Objects.equals(this.applepay, supportedPaymentTypesMessage.applepay) &&
        Objects.equals(this.creditcard, supportedPaymentTypesMessage.creditcard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(googlepay, applepay, creditcard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedPaymentTypesMessage {\n");
    sb.append("    googlepay: ").append(toIndentedString(googlepay)).append("\n");
    sb.append("    applepay: ").append(toIndentedString(applepay)).append("\n");
    sb.append("    creditcard: ").append(toIndentedString(creditcard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("googlepay");
    openapiFields.add("applepay");
    openapiFields.add("creditcard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("googlepay");
    openapiRequiredFields.add("applepay");
    openapiRequiredFields.add("creditcard");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SupportedPaymentTypesMessage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportedPaymentTypesMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportedPaymentTypesMessage is not found in the empty JSON string", SupportedPaymentTypesMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportedPaymentTypesMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportedPaymentTypesMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupportedPaymentTypesMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `googlepay`
      PaymentType.validateJsonElement(jsonObj.get("googlepay"));
      // validate the required field `applepay`
      PaymentType.validateJsonElement(jsonObj.get("applepay"));
      // validate the required field `creditcard`
      PaymentType.validateJsonElement(jsonObj.get("creditcard"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportedPaymentTypesMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportedPaymentTypesMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportedPaymentTypesMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportedPaymentTypesMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportedPaymentTypesMessage>() {
           @Override
           public void write(JsonWriter out, SupportedPaymentTypesMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportedPaymentTypesMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SupportedPaymentTypesMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SupportedPaymentTypesMessage
  * @throws IOException if the JSON string is invalid with respect to SupportedPaymentTypesMessage
  */
  public static SupportedPaymentTypesMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportedPaymentTypesMessage.class);
  }

 /**
  * Convert an instance of SupportedPaymentTypesMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

