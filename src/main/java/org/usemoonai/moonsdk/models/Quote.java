/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.usemoonai.moonsdk.models.AvailablePaymentMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * Quote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class Quote {
  public static final String SERIALIZED_NAME_RECOMMENDATIONS = "recommendations";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS)
  private List<String> recommendations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_RAMP = "ramp";
  @SerializedName(SERIALIZED_NAME_RAMP)
  private String ramp;

  public static final String SERIALIZED_NAME_AVAILABLE_PAYMENT_METHODS = "availablePaymentMethods";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PAYMENT_METHODS)
  private List<AvailablePaymentMethod> availablePaymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYOUT = "payout";
  @SerializedName(SERIALIZED_NAME_PAYOUT)
  private Double payout;

  public static final String SERIALIZED_NAME_TRANSACTION_FEE = "transactionFee";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE)
  private Double transactionFee;

  public static final String SERIALIZED_NAME_NETWORK_FEE = "networkFee";
  @SerializedName(SERIALIZED_NAME_NETWORK_FEE)
  private Double networkFee;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public Quote() {
  }

  public Quote recommendations(List<String> recommendations) {
    this.recommendations = recommendations;
    return this;
  }

  public Quote addRecommendationsItem(String recommendationsItem) {
    if (this.recommendations == null) {
      this.recommendations = new ArrayList<>();
    }
    this.recommendations.add(recommendationsItem);
    return this;
  }

   /**
   * Get recommendations
   * @return recommendations
  **/
  @javax.annotation.Nonnull
  public List<String> getRecommendations() {
    return recommendations;
  }

  public void setRecommendations(List<String> recommendations) {
    this.recommendations = recommendations;
  }


  public Quote paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nonnull
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Quote quoteId(String quoteId) {
    this.quoteId = quoteId;
    return this;
  }

   /**
   * Get quoteId
   * @return quoteId
  **/
  @javax.annotation.Nonnull
  public String getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(String quoteId) {
    this.quoteId = quoteId;
  }


  public Quote ramp(String ramp) {
    this.ramp = ramp;
    return this;
  }

   /**
   * Get ramp
   * @return ramp
  **/
  @javax.annotation.Nonnull
  public String getRamp() {
    return ramp;
  }

  public void setRamp(String ramp) {
    this.ramp = ramp;
  }


  public Quote availablePaymentMethods(List<AvailablePaymentMethod> availablePaymentMethods) {
    this.availablePaymentMethods = availablePaymentMethods;
    return this;
  }

  public Quote addAvailablePaymentMethodsItem(AvailablePaymentMethod availablePaymentMethodsItem) {
    if (this.availablePaymentMethods == null) {
      this.availablePaymentMethods = new ArrayList<>();
    }
    this.availablePaymentMethods.add(availablePaymentMethodsItem);
    return this;
  }

   /**
   * Get availablePaymentMethods
   * @return availablePaymentMethods
  **/
  @javax.annotation.Nonnull
  public List<AvailablePaymentMethod> getAvailablePaymentMethods() {
    return availablePaymentMethods;
  }

  public void setAvailablePaymentMethods(List<AvailablePaymentMethod> availablePaymentMethods) {
    this.availablePaymentMethods = availablePaymentMethods;
  }


  public Quote payout(Double payout) {
    this.payout = payout;
    return this;
  }

   /**
   * Get payout
   * @return payout
  **/
  @javax.annotation.Nonnull
  public Double getPayout() {
    return payout;
  }

  public void setPayout(Double payout) {
    this.payout = payout;
  }


  public Quote transactionFee(Double transactionFee) {
    this.transactionFee = transactionFee;
    return this;
  }

   /**
   * Get transactionFee
   * @return transactionFee
  **/
  @javax.annotation.Nonnull
  public Double getTransactionFee() {
    return transactionFee;
  }

  public void setTransactionFee(Double transactionFee) {
    this.transactionFee = transactionFee;
  }


  public Quote networkFee(Double networkFee) {
    this.networkFee = networkFee;
    return this;
  }

   /**
   * Get networkFee
   * @return networkFee
  **/
  @javax.annotation.Nonnull
  public Double getNetworkFee() {
    return networkFee;
  }

  public void setNetworkFee(Double networkFee) {
    this.networkFee = networkFee;
  }


  public Quote rate(Double rate) {
    this.rate = rate;
    return this;
  }

   /**
   * Get rate
   * @return rate
  **/
  @javax.annotation.Nonnull
  public Double getRate() {
    return rate;
  }

  public void setRate(Double rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.recommendations, quote.recommendations) &&
        Objects.equals(this.paymentMethod, quote.paymentMethod) &&
        Objects.equals(this.quoteId, quote.quoteId) &&
        Objects.equals(this.ramp, quote.ramp) &&
        Objects.equals(this.availablePaymentMethods, quote.availablePaymentMethods) &&
        Objects.equals(this.payout, quote.payout) &&
        Objects.equals(this.transactionFee, quote.transactionFee) &&
        Objects.equals(this.networkFee, quote.networkFee) &&
        Objects.equals(this.rate, quote.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recommendations, paymentMethod, quoteId, ramp, availablePaymentMethods, payout, transactionFee, networkFee, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    recommendations: ").append(toIndentedString(recommendations)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    ramp: ").append(toIndentedString(ramp)).append("\n");
    sb.append("    availablePaymentMethods: ").append(toIndentedString(availablePaymentMethods)).append("\n");
    sb.append("    payout: ").append(toIndentedString(payout)).append("\n");
    sb.append("    transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
    sb.append("    networkFee: ").append(toIndentedString(networkFee)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recommendations");
    openapiFields.add("paymentMethod");
    openapiFields.add("quoteId");
    openapiFields.add("ramp");
    openapiFields.add("availablePaymentMethods");
    openapiFields.add("payout");
    openapiFields.add("transactionFee");
    openapiFields.add("networkFee");
    openapiFields.add("rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recommendations");
    openapiRequiredFields.add("paymentMethod");
    openapiRequiredFields.add("quoteId");
    openapiRequiredFields.add("ramp");
    openapiRequiredFields.add("availablePaymentMethods");
    openapiRequiredFields.add("payout");
    openapiRequiredFields.add("transactionFee");
    openapiRequiredFields.add("networkFee");
    openapiRequiredFields.add("rate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Quote
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quote is not found in the empty JSON string", Quote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Quote.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("recommendations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("recommendations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendations` to be an array in the JSON string but got `%s`", jsonObj.get("recommendations").toString()));
      }
      if (!jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      if (!jsonObj.get("quoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteId").toString()));
      }
      if (!jsonObj.get("ramp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ramp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ramp").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("availablePaymentMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availablePaymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("availablePaymentMethods").toString()));
      }

      JsonArray jsonArrayavailablePaymentMethods = jsonObj.getAsJsonArray("availablePaymentMethods");
      // validate the required field `availablePaymentMethods` (array)
      for (int i = 0; i < jsonArrayavailablePaymentMethods.size(); i++) {
        AvailablePaymentMethod.validateJsonElement(jsonArrayavailablePaymentMethods.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quote.class));

       return (TypeAdapter<T>) new TypeAdapter<Quote>() {
           @Override
           public void write(JsonWriter out, Quote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Quote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Quote
  * @throws IOException if the JSON string is invalid with respect to Quote
  */
  public static Quote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quote.class);
  }

 /**
  * Convert an instance of Quote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

