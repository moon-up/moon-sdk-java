/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * TatumTransactionEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-26T19:21:21.691562056+10:00[Australia/Brisbane]")
public class TatumTransactionEvent {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_COUNTER_ADDRESS = "counterAddress";
  @SerializedName(SERIALIZED_NAME_COUNTER_ADDRESS)
  private String counterAddress;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_MEMPOOL = "mempool";
  @SerializedName(SERIALIZED_NAME_MEMPOOL)
  private Boolean mempool;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TYPE = "subscriptionType";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TYPE)
  private String subscriptionType;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "blockNumber";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Double blockNumber;

  public static final String SERIALIZED_NAME_TX_ID = "txId";
  @SerializedName(SERIALIZED_NAME_TX_ID)
  private String txId;

  public static final String SERIALIZED_NAME_CHAIN = "chain";
  @SerializedName(SERIALIZED_NAME_CHAIN)
  private String chain;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public TatumTransactionEvent() {
  }

  public TatumTransactionEvent amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TatumTransactionEvent test(Boolean test) {
    this.test = test;
    return this;
  }

   /**
   * Get test
   * @return test
  **/
  @javax.annotation.Nonnull
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public TatumTransactionEvent counterAddress(String counterAddress) {
    this.counterAddress = counterAddress;
    return this;
  }

   /**
   * Get counterAddress
   * @return counterAddress
  **/
  @javax.annotation.Nonnull
  public String getCounterAddress() {
    return counterAddress;
  }

  public void setCounterAddress(String counterAddress) {
    this.counterAddress = counterAddress;
  }


  public TatumTransactionEvent address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TatumTransactionEvent mempool(Boolean mempool) {
    this.mempool = mempool;
    return this;
  }

   /**
   * Get mempool
   * @return mempool
  **/
  @javax.annotation.Nonnull
  public Boolean getMempool() {
    return mempool;
  }

  public void setMempool(Boolean mempool) {
    this.mempool = mempool;
  }


  public TatumTransactionEvent subscriptionType(String subscriptionType) {
    this.subscriptionType = subscriptionType;
    return this;
  }

   /**
   * Get subscriptionType
   * @return subscriptionType
  **/
  @javax.annotation.Nonnull
  public String getSubscriptionType() {
    return subscriptionType;
  }

  public void setSubscriptionType(String subscriptionType) {
    this.subscriptionType = subscriptionType;
  }


  public TatumTransactionEvent blockNumber(Double blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Get blockNumber
   * @return blockNumber
  **/
  @javax.annotation.Nonnull
  public Double getBlockNumber() {
    return blockNumber;
  }

  public void setBlockNumber(Double blockNumber) {
    this.blockNumber = blockNumber;
  }


  public TatumTransactionEvent txId(String txId) {
    this.txId = txId;
    return this;
  }

   /**
   * Get txId
   * @return txId
  **/
  @javax.annotation.Nonnull
  public String getTxId() {
    return txId;
  }

  public void setTxId(String txId) {
    this.txId = txId;
  }


  public TatumTransactionEvent chain(String chain) {
    this.chain = chain;
    return this;
  }

   /**
   * Get chain
   * @return chain
  **/
  @javax.annotation.Nonnull
  public String getChain() {
    return chain;
  }

  public void setChain(String chain) {
    this.chain = chain;
  }


  public TatumTransactionEvent currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TatumTransactionEvent tatumTransactionEvent = (TatumTransactionEvent) o;
    return Objects.equals(this.amount, tatumTransactionEvent.amount) &&
        Objects.equals(this.test, tatumTransactionEvent.test) &&
        Objects.equals(this.counterAddress, tatumTransactionEvent.counterAddress) &&
        Objects.equals(this.address, tatumTransactionEvent.address) &&
        Objects.equals(this.mempool, tatumTransactionEvent.mempool) &&
        Objects.equals(this.subscriptionType, tatumTransactionEvent.subscriptionType) &&
        Objects.equals(this.blockNumber, tatumTransactionEvent.blockNumber) &&
        Objects.equals(this.txId, tatumTransactionEvent.txId) &&
        Objects.equals(this.chain, tatumTransactionEvent.chain) &&
        Objects.equals(this.currency, tatumTransactionEvent.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, test, counterAddress, address, mempool, subscriptionType, blockNumber, txId, chain, currency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TatumTransactionEvent {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    counterAddress: ").append(toIndentedString(counterAddress)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    mempool: ").append(toIndentedString(mempool)).append("\n");
    sb.append("    subscriptionType: ").append(toIndentedString(subscriptionType)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    txId: ").append(toIndentedString(txId)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("test");
    openapiFields.add("counterAddress");
    openapiFields.add("address");
    openapiFields.add("mempool");
    openapiFields.add("subscriptionType");
    openapiFields.add("blockNumber");
    openapiFields.add("txId");
    openapiFields.add("chain");
    openapiFields.add("currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("test");
    openapiRequiredFields.add("counterAddress");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("mempool");
    openapiRequiredFields.add("subscriptionType");
    openapiRequiredFields.add("blockNumber");
    openapiRequiredFields.add("txId");
    openapiRequiredFields.add("chain");
    openapiRequiredFields.add("currency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TatumTransactionEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TatumTransactionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TatumTransactionEvent is not found in the empty JSON string", TatumTransactionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TatumTransactionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TatumTransactionEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TatumTransactionEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("counterAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterAddress").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("subscriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionType").toString()));
      }
      if (!jsonObj.get("txId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txId").toString()));
      }
      if (!jsonObj.get("chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TatumTransactionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TatumTransactionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TatumTransactionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TatumTransactionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TatumTransactionEvent>() {
           @Override
           public void write(JsonWriter out, TatumTransactionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TatumTransactionEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TatumTransactionEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TatumTransactionEvent
  * @throws IOException if the JSON string is invalid with respect to TatumTransactionEvent
  */
  public static TatumTransactionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TatumTransactionEvent.class);
  }

 /**
  * Convert an instance of TatumTransactionEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

