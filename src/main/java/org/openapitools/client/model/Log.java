/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TriggerOutput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Log
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T19:39:59.155569+10:00[Australia/Brisbane]")
public class Log {
  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<TriggerOutput> triggers;

  public static final String SERIALIZED_NAME_LOG_INDEX = "logIndex";
  @SerializedName(SERIALIZED_NAME_LOG_INDEX)
  private String logIndex;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_TOPIC0 = "topic0";
  @SerializedName(SERIALIZED_NAME_TOPIC0)
  private String topic0;

  public static final String SERIALIZED_NAME_TOPIC1 = "topic1";
  @SerializedName(SERIALIZED_NAME_TOPIC1)
  private String topic1;

  public static final String SERIALIZED_NAME_TOPIC2 = "topic2";
  @SerializedName(SERIALIZED_NAME_TOPIC2)
  private String topic2;

  public static final String SERIALIZED_NAME_TOPIC3 = "topic3";
  @SerializedName(SERIALIZED_NAME_TOPIC3)
  private String topic3;

  public Log() {
  }

  public Log triggers(List<TriggerOutput> triggers) {
    
    this.triggers = triggers;
    return this;
  }

  public Log addTriggersItem(TriggerOutput triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

   /**
   * Get triggers
   * @return triggers
  **/
  @javax.annotation.Nullable
  public List<TriggerOutput> getTriggers() {
    return triggers;
  }


  public void setTriggers(List<TriggerOutput> triggers) {
    this.triggers = triggers;
  }


  public Log logIndex(String logIndex) {
    
    this.logIndex = logIndex;
    return this;
  }

   /**
   * Get logIndex
   * @return logIndex
  **/
  @javax.annotation.Nonnull
  public String getLogIndex() {
    return logIndex;
  }


  public void setLogIndex(String logIndex) {
    this.logIndex = logIndex;
  }


  public Log transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @javax.annotation.Nonnull
  public String getTransactionHash() {
    return transactionHash;
  }


  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public Log address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public Log data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public Log topic0(String topic0) {
    
    this.topic0 = topic0;
    return this;
  }

   /**
   * Get topic0
   * @return topic0
  **/
  @javax.annotation.Nullable
  public String getTopic0() {
    return topic0;
  }


  public void setTopic0(String topic0) {
    this.topic0 = topic0;
  }


  public Log topic1(String topic1) {
    
    this.topic1 = topic1;
    return this;
  }

   /**
   * Get topic1
   * @return topic1
  **/
  @javax.annotation.Nullable
  public String getTopic1() {
    return topic1;
  }


  public void setTopic1(String topic1) {
    this.topic1 = topic1;
  }


  public Log topic2(String topic2) {
    
    this.topic2 = topic2;
    return this;
  }

   /**
   * Get topic2
   * @return topic2
  **/
  @javax.annotation.Nullable
  public String getTopic2() {
    return topic2;
  }


  public void setTopic2(String topic2) {
    this.topic2 = topic2;
  }


  public Log topic3(String topic3) {
    
    this.topic3 = topic3;
    return this;
  }

   /**
   * Get topic3
   * @return topic3
  **/
  @javax.annotation.Nullable
  public String getTopic3() {
    return topic3;
  }


  public void setTopic3(String topic3) {
    this.topic3 = topic3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Log log = (Log) o;
    return Objects.equals(this.triggers, log.triggers) &&
        Objects.equals(this.logIndex, log.logIndex) &&
        Objects.equals(this.transactionHash, log.transactionHash) &&
        Objects.equals(this.address, log.address) &&
        Objects.equals(this.data, log.data) &&
        Objects.equals(this.topic0, log.topic0) &&
        Objects.equals(this.topic1, log.topic1) &&
        Objects.equals(this.topic2, log.topic2) &&
        Objects.equals(this.topic3, log.topic3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(triggers, logIndex, transactionHash, address, data, topic0, topic1, topic2, topic3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Log {\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    logIndex: ").append(toIndentedString(logIndex)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    topic0: ").append(toIndentedString(topic0)).append("\n");
    sb.append("    topic1: ").append(toIndentedString(topic1)).append("\n");
    sb.append("    topic2: ").append(toIndentedString(topic2)).append("\n");
    sb.append("    topic3: ").append(toIndentedString(topic3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("triggers");
    openapiFields.add("logIndex");
    openapiFields.add("transactionHash");
    openapiFields.add("address");
    openapiFields.add("data");
    openapiFields.add("topic0");
    openapiFields.add("topic1");
    openapiFields.add("topic2");
    openapiFields.add("topic3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logIndex");
    openapiRequiredFields.add("transactionHash");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("topic0");
    openapiRequiredFields.add("topic1");
    openapiRequiredFields.add("topic2");
    openapiRequiredFields.add("topic3");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Log
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Log.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Log is not found in the empty JSON string", Log.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Log.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Log` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Log.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
          }

          // validate the optional field `triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            TriggerOutput.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
      if (!jsonObj.get("logIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logIndex").toString()));
      }
      if (!jsonObj.get("transactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionHash").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("topic0") != null && !jsonObj.get("topic0").isJsonNull()) && !jsonObj.get("topic0").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic0` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic0").toString()));
      }
      if ((jsonObj.get("topic1") != null && !jsonObj.get("topic1").isJsonNull()) && !jsonObj.get("topic1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic1").toString()));
      }
      if ((jsonObj.get("topic2") != null && !jsonObj.get("topic2").isJsonNull()) && !jsonObj.get("topic2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic2").toString()));
      }
      if ((jsonObj.get("topic3") != null && !jsonObj.get("topic3").isJsonNull()) && !jsonObj.get("topic3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Log.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Log' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Log> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Log.class));

       return (TypeAdapter<T>) new TypeAdapter<Log>() {
           @Override
           public void write(JsonWriter out, Log value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Log read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Log given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Log
  * @throws IOException if the JSON string is invalid with respect to Log
  */
  public static Log fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Log.class);
  }

 /**
  * Convert an instance of Log to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

