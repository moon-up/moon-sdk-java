/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AbiItem;
import org.openapitools.client.model.Block;
import org.openapitools.client.model.IERC20Approval;
import org.openapitools.client.model.IERC20Transfer;
import org.openapitools.client.model.INFTApproval;
import org.openapitools.client.model.INFTTransfer;
import org.openapitools.client.model.INativeBalance;
import org.openapitools.client.model.IOldNFTApproval;
import org.openapitools.client.model.InternalTransaction;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.Transaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IWebhook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T19:39:59.155569+10:00[Australia/Brisbane]")
public class IWebhook {
  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private Block block;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chainId";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<Log> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private List<Transaction> txs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TXS_INTERNAL = "txsInternal";
  @SerializedName(SERIALIZED_NAME_TXS_INTERNAL)
  private List<InternalTransaction> txsInternal = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABI = "abi";
  @SerializedName(SERIALIZED_NAME_ABI)
  private List<AbiItem> abi = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Double retries;

  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_STREAM_ID = "streamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public static final String SERIALIZED_NAME_ERC20_TRANSFERS = "erc20Transfers";
  @SerializedName(SERIALIZED_NAME_ERC20_TRANSFERS)
  private List<IERC20Transfer> erc20Transfers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERC20_APPROVALS = "erc20Approvals";
  @SerializedName(SERIALIZED_NAME_ERC20_APPROVALS)
  private List<IERC20Approval> erc20Approvals = new ArrayList<>();

  public static final String SERIALIZED_NAME_NFT_TRANSFERS = "nftTransfers";
  @SerializedName(SERIALIZED_NAME_NFT_TRANSFERS)
  private List<INFTTransfer> nftTransfers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NATIVE_BALANCES = "nativeBalances";
  @SerializedName(SERIALIZED_NAME_NATIVE_BALANCES)
  private List<INativeBalance> nativeBalances = new ArrayList<>();

  public static final String SERIALIZED_NAME_NFT_APPROVALS = "nftApprovals";
  @SerializedName(SERIALIZED_NAME_NFT_APPROVALS)
  private IOldNFTApproval nftApprovals;

  public static final String SERIALIZED_NAME_NFT_TOKEN_APPROVALS = "nftTokenApprovals";
  @SerializedName(SERIALIZED_NAME_NFT_TOKEN_APPROVALS)
  private List<INFTApproval> nftTokenApprovals = new ArrayList<>();

  public IWebhook() {
  }

  public IWebhook block(Block block) {
    
    this.block = block;
    return this;
  }

   /**
   * Get block
   * @return block
  **/
  @javax.annotation.Nonnull
  public Block getBlock() {
    return block;
  }


  public void setBlock(Block block) {
    this.block = block;
  }


  public IWebhook chainId(String chainId) {
    
    this.chainId = chainId;
    return this;
  }

   /**
   * Get chainId
   * @return chainId
  **/
  @javax.annotation.Nonnull
  public String getChainId() {
    return chainId;
  }


  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public IWebhook logs(List<Log> logs) {
    
    this.logs = logs;
    return this;
  }

  public IWebhook addLogsItem(Log logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nonnull
  public List<Log> getLogs() {
    return logs;
  }


  public void setLogs(List<Log> logs) {
    this.logs = logs;
  }


  public IWebhook txs(List<Transaction> txs) {
    
    this.txs = txs;
    return this;
  }

  public IWebhook addTxsItem(Transaction txsItem) {
    if (this.txs == null) {
      this.txs = new ArrayList<>();
    }
    this.txs.add(txsItem);
    return this;
  }

   /**
   * Get txs
   * @return txs
  **/
  @javax.annotation.Nonnull
  public List<Transaction> getTxs() {
    return txs;
  }


  public void setTxs(List<Transaction> txs) {
    this.txs = txs;
  }


  public IWebhook txsInternal(List<InternalTransaction> txsInternal) {
    
    this.txsInternal = txsInternal;
    return this;
  }

  public IWebhook addTxsInternalItem(InternalTransaction txsInternalItem) {
    if (this.txsInternal == null) {
      this.txsInternal = new ArrayList<>();
    }
    this.txsInternal.add(txsInternalItem);
    return this;
  }

   /**
   * Get txsInternal
   * @return txsInternal
  **/
  @javax.annotation.Nonnull
  public List<InternalTransaction> getTxsInternal() {
    return txsInternal;
  }


  public void setTxsInternal(List<InternalTransaction> txsInternal) {
    this.txsInternal = txsInternal;
  }


  public IWebhook abi(List<AbiItem> abi) {
    
    this.abi = abi;
    return this;
  }

  public IWebhook addAbiItem(AbiItem abiItem) {
    if (this.abi == null) {
      this.abi = new ArrayList<>();
    }
    this.abi.add(abiItem);
    return this;
  }

   /**
   * Get abi
   * @return abi
  **/
  @javax.annotation.Nonnull
  public List<AbiItem> getAbi() {
    return abi;
  }


  public void setAbi(List<AbiItem> abi) {
    this.abi = abi;
  }


  public IWebhook retries(Double retries) {
    
    this.retries = retries;
    return this;
  }

   /**
   * Get retries
   * @return retries
  **/
  @javax.annotation.Nonnull
  public Double getRetries() {
    return retries;
  }


  public void setRetries(Double retries) {
    this.retries = retries;
  }


  public IWebhook confirmed(Boolean confirmed) {
    
    this.confirmed = confirmed;
    return this;
  }

   /**
   * Get confirmed
   * @return confirmed
  **/
  @javax.annotation.Nonnull
  public Boolean getConfirmed() {
    return confirmed;
  }


  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public IWebhook tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nonnull
  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public IWebhook streamId(String streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * Get streamId
   * @return streamId
  **/
  @javax.annotation.Nonnull
  public String getStreamId() {
    return streamId;
  }


  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public IWebhook erc20Transfers(List<IERC20Transfer> erc20Transfers) {
    
    this.erc20Transfers = erc20Transfers;
    return this;
  }

  public IWebhook addErc20TransfersItem(IERC20Transfer erc20TransfersItem) {
    if (this.erc20Transfers == null) {
      this.erc20Transfers = new ArrayList<>();
    }
    this.erc20Transfers.add(erc20TransfersItem);
    return this;
  }

   /**
   * Get erc20Transfers
   * @return erc20Transfers
  **/
  @javax.annotation.Nonnull
  public List<IERC20Transfer> getErc20Transfers() {
    return erc20Transfers;
  }


  public void setErc20Transfers(List<IERC20Transfer> erc20Transfers) {
    this.erc20Transfers = erc20Transfers;
  }


  public IWebhook erc20Approvals(List<IERC20Approval> erc20Approvals) {
    
    this.erc20Approvals = erc20Approvals;
    return this;
  }

  public IWebhook addErc20ApprovalsItem(IERC20Approval erc20ApprovalsItem) {
    if (this.erc20Approvals == null) {
      this.erc20Approvals = new ArrayList<>();
    }
    this.erc20Approvals.add(erc20ApprovalsItem);
    return this;
  }

   /**
   * Get erc20Approvals
   * @return erc20Approvals
  **/
  @javax.annotation.Nonnull
  public List<IERC20Approval> getErc20Approvals() {
    return erc20Approvals;
  }


  public void setErc20Approvals(List<IERC20Approval> erc20Approvals) {
    this.erc20Approvals = erc20Approvals;
  }


  public IWebhook nftTransfers(List<INFTTransfer> nftTransfers) {
    
    this.nftTransfers = nftTransfers;
    return this;
  }

  public IWebhook addNftTransfersItem(INFTTransfer nftTransfersItem) {
    if (this.nftTransfers == null) {
      this.nftTransfers = new ArrayList<>();
    }
    this.nftTransfers.add(nftTransfersItem);
    return this;
  }

   /**
   * Get nftTransfers
   * @return nftTransfers
  **/
  @javax.annotation.Nonnull
  public List<INFTTransfer> getNftTransfers() {
    return nftTransfers;
  }


  public void setNftTransfers(List<INFTTransfer> nftTransfers) {
    this.nftTransfers = nftTransfers;
  }


  public IWebhook nativeBalances(List<INativeBalance> nativeBalances) {
    
    this.nativeBalances = nativeBalances;
    return this;
  }

  public IWebhook addNativeBalancesItem(INativeBalance nativeBalancesItem) {
    if (this.nativeBalances == null) {
      this.nativeBalances = new ArrayList<>();
    }
    this.nativeBalances.add(nativeBalancesItem);
    return this;
  }

   /**
   * Get nativeBalances
   * @return nativeBalances
  **/
  @javax.annotation.Nonnull
  public List<INativeBalance> getNativeBalances() {
    return nativeBalances;
  }


  public void setNativeBalances(List<INativeBalance> nativeBalances) {
    this.nativeBalances = nativeBalances;
  }


  public IWebhook nftApprovals(IOldNFTApproval nftApprovals) {
    
    this.nftApprovals = nftApprovals;
    return this;
  }

   /**
   * Get nftApprovals
   * @return nftApprovals
  **/
  @javax.annotation.Nonnull
  public IOldNFTApproval getNftApprovals() {
    return nftApprovals;
  }


  public void setNftApprovals(IOldNFTApproval nftApprovals) {
    this.nftApprovals = nftApprovals;
  }


  public IWebhook nftTokenApprovals(List<INFTApproval> nftTokenApprovals) {
    
    this.nftTokenApprovals = nftTokenApprovals;
    return this;
  }

  public IWebhook addNftTokenApprovalsItem(INFTApproval nftTokenApprovalsItem) {
    if (this.nftTokenApprovals == null) {
      this.nftTokenApprovals = new ArrayList<>();
    }
    this.nftTokenApprovals.add(nftTokenApprovalsItem);
    return this;
  }

   /**
   * Get nftTokenApprovals
   * @return nftTokenApprovals
  **/
  @javax.annotation.Nonnull
  public List<INFTApproval> getNftTokenApprovals() {
    return nftTokenApprovals;
  }


  public void setNftTokenApprovals(List<INFTApproval> nftTokenApprovals) {
    this.nftTokenApprovals = nftTokenApprovals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IWebhook iwebhook = (IWebhook) o;
    return Objects.equals(this.block, iwebhook.block) &&
        Objects.equals(this.chainId, iwebhook.chainId) &&
        Objects.equals(this.logs, iwebhook.logs) &&
        Objects.equals(this.txs, iwebhook.txs) &&
        Objects.equals(this.txsInternal, iwebhook.txsInternal) &&
        Objects.equals(this.abi, iwebhook.abi) &&
        Objects.equals(this.retries, iwebhook.retries) &&
        Objects.equals(this.confirmed, iwebhook.confirmed) &&
        Objects.equals(this.tag, iwebhook.tag) &&
        Objects.equals(this.streamId, iwebhook.streamId) &&
        Objects.equals(this.erc20Transfers, iwebhook.erc20Transfers) &&
        Objects.equals(this.erc20Approvals, iwebhook.erc20Approvals) &&
        Objects.equals(this.nftTransfers, iwebhook.nftTransfers) &&
        Objects.equals(this.nativeBalances, iwebhook.nativeBalances) &&
        Objects.equals(this.nftApprovals, iwebhook.nftApprovals) &&
        Objects.equals(this.nftTokenApprovals, iwebhook.nftTokenApprovals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(block, chainId, logs, txs, txsInternal, abi, retries, confirmed, tag, streamId, erc20Transfers, erc20Approvals, nftTransfers, nativeBalances, nftApprovals, nftTokenApprovals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IWebhook {\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("    txsInternal: ").append(toIndentedString(txsInternal)).append("\n");
    sb.append("    abi: ").append(toIndentedString(abi)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    erc20Transfers: ").append(toIndentedString(erc20Transfers)).append("\n");
    sb.append("    erc20Approvals: ").append(toIndentedString(erc20Approvals)).append("\n");
    sb.append("    nftTransfers: ").append(toIndentedString(nftTransfers)).append("\n");
    sb.append("    nativeBalances: ").append(toIndentedString(nativeBalances)).append("\n");
    sb.append("    nftApprovals: ").append(toIndentedString(nftApprovals)).append("\n");
    sb.append("    nftTokenApprovals: ").append(toIndentedString(nftTokenApprovals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block");
    openapiFields.add("chainId");
    openapiFields.add("logs");
    openapiFields.add("txs");
    openapiFields.add("txsInternal");
    openapiFields.add("abi");
    openapiFields.add("retries");
    openapiFields.add("confirmed");
    openapiFields.add("tag");
    openapiFields.add("streamId");
    openapiFields.add("erc20Transfers");
    openapiFields.add("erc20Approvals");
    openapiFields.add("nftTransfers");
    openapiFields.add("nativeBalances");
    openapiFields.add("nftApprovals");
    openapiFields.add("nftTokenApprovals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("block");
    openapiRequiredFields.add("chainId");
    openapiRequiredFields.add("logs");
    openapiRequiredFields.add("txs");
    openapiRequiredFields.add("txsInternal");
    openapiRequiredFields.add("abi");
    openapiRequiredFields.add("retries");
    openapiRequiredFields.add("confirmed");
    openapiRequiredFields.add("tag");
    openapiRequiredFields.add("streamId");
    openapiRequiredFields.add("erc20Transfers");
    openapiRequiredFields.add("erc20Approvals");
    openapiRequiredFields.add("nftTransfers");
    openapiRequiredFields.add("nativeBalances");
    openapiRequiredFields.add("nftApprovals");
    openapiRequiredFields.add("nftTokenApprovals");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IWebhook
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IWebhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IWebhook is not found in the empty JSON string", IWebhook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IWebhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IWebhook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IWebhook.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `block`
      Block.validateJsonElement(jsonObj.get("block"));
      if (!jsonObj.get("chainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("logs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }

      JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
      // validate the required field `logs` (array)
      for (int i = 0; i < jsonArraylogs.size(); i++) {
        Log.validateJsonElement(jsonArraylogs.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("txs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `txs` to be an array in the JSON string but got `%s`", jsonObj.get("txs").toString()));
      }

      JsonArray jsonArraytxs = jsonObj.getAsJsonArray("txs");
      // validate the required field `txs` (array)
      for (int i = 0; i < jsonArraytxs.size(); i++) {
        Transaction.validateJsonElement(jsonArraytxs.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("txsInternal").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `txsInternal` to be an array in the JSON string but got `%s`", jsonObj.get("txsInternal").toString()));
      }

      JsonArray jsonArraytxsInternal = jsonObj.getAsJsonArray("txsInternal");
      // validate the required field `txsInternal` (array)
      for (int i = 0; i < jsonArraytxsInternal.size(); i++) {
        InternalTransaction.validateJsonElement(jsonArraytxsInternal.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("abi").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `abi` to be an array in the JSON string but got `%s`", jsonObj.get("abi").toString()));
      }

      JsonArray jsonArrayabi = jsonObj.getAsJsonArray("abi");
      // validate the required field `abi` (array)
      for (int i = 0; i < jsonArrayabi.size(); i++) {
        AbiItem.validateJsonElement(jsonArrayabi.get(i));
      };
      if (!jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (!jsonObj.get("streamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("erc20Transfers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `erc20Transfers` to be an array in the JSON string but got `%s`", jsonObj.get("erc20Transfers").toString()));
      }

      JsonArray jsonArrayerc20Transfers = jsonObj.getAsJsonArray("erc20Transfers");
      // validate the required field `erc20Transfers` (array)
      for (int i = 0; i < jsonArrayerc20Transfers.size(); i++) {
        IERC20Transfer.validateJsonElement(jsonArrayerc20Transfers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("erc20Approvals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `erc20Approvals` to be an array in the JSON string but got `%s`", jsonObj.get("erc20Approvals").toString()));
      }

      JsonArray jsonArrayerc20Approvals = jsonObj.getAsJsonArray("erc20Approvals");
      // validate the required field `erc20Approvals` (array)
      for (int i = 0; i < jsonArrayerc20Approvals.size(); i++) {
        IERC20Approval.validateJsonElement(jsonArrayerc20Approvals.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("nftTransfers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nftTransfers` to be an array in the JSON string but got `%s`", jsonObj.get("nftTransfers").toString()));
      }

      JsonArray jsonArraynftTransfers = jsonObj.getAsJsonArray("nftTransfers");
      // validate the required field `nftTransfers` (array)
      for (int i = 0; i < jsonArraynftTransfers.size(); i++) {
        INFTTransfer.validateJsonElement(jsonArraynftTransfers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("nativeBalances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nativeBalances` to be an array in the JSON string but got `%s`", jsonObj.get("nativeBalances").toString()));
      }

      JsonArray jsonArraynativeBalances = jsonObj.getAsJsonArray("nativeBalances");
      // validate the required field `nativeBalances` (array)
      for (int i = 0; i < jsonArraynativeBalances.size(); i++) {
        INativeBalance.validateJsonElement(jsonArraynativeBalances.get(i));
      };
      // validate the required field `nftApprovals`
      IOldNFTApproval.validateJsonElement(jsonObj.get("nftApprovals"));
      // ensure the json data is an array
      if (!jsonObj.get("nftTokenApprovals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nftTokenApprovals` to be an array in the JSON string but got `%s`", jsonObj.get("nftTokenApprovals").toString()));
      }

      JsonArray jsonArraynftTokenApprovals = jsonObj.getAsJsonArray("nftTokenApprovals");
      // validate the required field `nftTokenApprovals` (array)
      for (int i = 0; i < jsonArraynftTokenApprovals.size(); i++) {
        INFTApproval.validateJsonElement(jsonArraynftTokenApprovals.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IWebhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IWebhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IWebhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IWebhook.class));

       return (TypeAdapter<T>) new TypeAdapter<IWebhook>() {
           @Override
           public void write(JsonWriter out, IWebhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IWebhook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IWebhook given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IWebhook
  * @throws IOException if the JSON string is invalid with respect to IWebhook
  */
  public static IWebhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IWebhook.class);
  }

 /**
  * Convert an instance of IWebhook to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

