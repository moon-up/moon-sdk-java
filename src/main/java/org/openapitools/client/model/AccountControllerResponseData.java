/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AaveReservesData;
import org.openapitools.client.model.AccountResponse;
import org.openapitools.client.model.BalanceResponse;
import org.openapitools.client.model.BitcoinTransactionOutput;
import org.openapitools.client.model.BroadCastRawTransactionResponse;
import org.openapitools.client.model.ENSReverseResolveResponse;
import org.openapitools.client.model.EnsResolveResponse;
import org.openapitools.client.model.Erc1155Response;
import org.openapitools.client.model.Erc20Response;
import org.openapitools.client.model.Erc721Response;
import org.openapitools.client.model.NonceResponse;
import org.openapitools.client.model.SignMessage;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionData;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.Tx;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T19:39:59.155569+10:00[Australia/Brisbane]")
public class AccountControllerResponseData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccountControllerResponseData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountControllerResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountControllerResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NonceResponse> adapterNonceResponse = gson.getDelegateAdapter(this, TypeToken.get(NonceResponse.class));
            final TypeAdapter<BalanceResponse> adapterBalanceResponse = gson.getDelegateAdapter(this, TypeToken.get(BalanceResponse.class));
            final TypeAdapter<Transaction> adapterTransaction = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));
            final TypeAdapter<AccountResponse> adapterAccountResponse = gson.getDelegateAdapter(this, TypeToken.get(AccountResponse.class));
            final TypeAdapter<SignMessage> adapterSignMessage = gson.getDelegateAdapter(this, TypeToken.get(SignMessage.class));
            final TypeAdapter<EnsResolveResponse> adapterEnsResolveResponse = gson.getDelegateAdapter(this, TypeToken.get(EnsResolveResponse.class));
            final TypeAdapter<ENSReverseResolveResponse> adapterENSReverseResolveResponse = gson.getDelegateAdapter(this, TypeToken.get(ENSReverseResolveResponse.class));
            final TypeAdapter<AaveReservesData> adapterAaveReservesData = gson.getDelegateAdapter(this, TypeToken.get(AaveReservesData.class));
            final TypeAdapter<Erc20Response> adapterErc20Response = gson.getDelegateAdapter(this, TypeToken.get(Erc20Response.class));
            final TypeAdapter<Erc1155Response> adapterErc1155Response = gson.getDelegateAdapter(this, TypeToken.get(Erc1155Response.class));
            final TypeAdapter<BroadCastRawTransactionResponse> adapterBroadCastRawTransactionResponse = gson.getDelegateAdapter(this, TypeToken.get(BroadCastRawTransactionResponse.class));
            final TypeAdapter<BitcoinTransactionOutput> adapterBitcoinTransactionOutput = gson.getDelegateAdapter(this, TypeToken.get(BitcoinTransactionOutput.class));
            final TypeAdapter<Erc721Response> adapterErc721Response = gson.getDelegateAdapter(this, TypeToken.get(Erc721Response.class));

            return (TypeAdapter<T>) new TypeAdapter<AccountControllerResponseData>() {
                @Override
                public void write(JsonWriter out, AccountControllerResponseData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `NonceResponse`
                    if (value.getActualInstance() instanceof NonceResponse) {
                      JsonElement element = adapterNonceResponse.toJsonTree((NonceResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BalanceResponse`
                    if (value.getActualInstance() instanceof BalanceResponse) {
                      JsonElement element = adapterBalanceResponse.toJsonTree((BalanceResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Transaction`
                    if (value.getActualInstance() instanceof Transaction) {
                      JsonElement element = adapterTransaction.toJsonTree((Transaction)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AccountResponse`
                    if (value.getActualInstance() instanceof AccountResponse) {
                      JsonElement element = adapterAccountResponse.toJsonTree((AccountResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `SignMessage`
                    if (value.getActualInstance() instanceof SignMessage) {
                      JsonElement element = adapterSignMessage.toJsonTree((SignMessage)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EnsResolveResponse`
                    if (value.getActualInstance() instanceof EnsResolveResponse) {
                      JsonElement element = adapterEnsResolveResponse.toJsonTree((EnsResolveResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ENSReverseResolveResponse`
                    if (value.getActualInstance() instanceof ENSReverseResolveResponse) {
                      JsonElement element = adapterENSReverseResolveResponse.toJsonTree((ENSReverseResolveResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AaveReservesData`
                    if (value.getActualInstance() instanceof AaveReservesData) {
                      JsonElement element = adapterAaveReservesData.toJsonTree((AaveReservesData)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Erc20Response`
                    if (value.getActualInstance() instanceof Erc20Response) {
                      JsonElement element = adapterErc20Response.toJsonTree((Erc20Response)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Erc1155Response`
                    if (value.getActualInstance() instanceof Erc1155Response) {
                      JsonElement element = adapterErc1155Response.toJsonTree((Erc1155Response)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BroadCastRawTransactionResponse`
                    if (value.getActualInstance() instanceof BroadCastRawTransactionResponse) {
                      JsonElement element = adapterBroadCastRawTransactionResponse.toJsonTree((BroadCastRawTransactionResponse)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BitcoinTransactionOutput`
                    if (value.getActualInstance() instanceof BitcoinTransactionOutput) {
                      JsonElement element = adapterBitcoinTransactionOutput.toJsonTree((BitcoinTransactionOutput)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Erc721Response`
                    if (value.getActualInstance() instanceof Erc721Response) {
                      JsonElement element = adapterErc721Response.toJsonTree((Erc721Response)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemae: AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction");
                }

                @Override
                public AccountControllerResponseData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize NonceResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      NonceResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterNonceResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for NonceResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'NonceResponse'", e);
                    }
                    // deserialize BalanceResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BalanceResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterBalanceResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BalanceResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BalanceResponse'", e);
                    }
                    // deserialize Transaction
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Transaction.validateJsonElement(jsonElement);
                      actualAdapter = adapterTransaction;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Transaction failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Transaction'", e);
                    }
                    // deserialize AccountResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountResponse'", e);
                    }
                    // deserialize SignMessage
                    try {
                      // validate the JSON object to see if any exception is thrown
                      SignMessage.validateJsonElement(jsonElement);
                      actualAdapter = adapterSignMessage;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for SignMessage failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'SignMessage'", e);
                    }
                    // deserialize EnsResolveResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EnsResolveResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterEnsResolveResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EnsResolveResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EnsResolveResponse'", e);
                    }
                    // deserialize ENSReverseResolveResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ENSReverseResolveResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterENSReverseResolveResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ENSReverseResolveResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ENSReverseResolveResponse'", e);
                    }
                    // deserialize AaveReservesData
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AaveReservesData.validateJsonElement(jsonElement);
                      actualAdapter = adapterAaveReservesData;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AaveReservesData failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AaveReservesData'", e);
                    }
                    // deserialize Erc20Response
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Erc20Response.validateJsonElement(jsonElement);
                      actualAdapter = adapterErc20Response;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Erc20Response failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Erc20Response'", e);
                    }
                    // deserialize Erc1155Response
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Erc1155Response.validateJsonElement(jsonElement);
                      actualAdapter = adapterErc1155Response;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Erc1155Response failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Erc1155Response'", e);
                    }
                    // deserialize BroadCastRawTransactionResponse
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BroadCastRawTransactionResponse.validateJsonElement(jsonElement);
                      actualAdapter = adapterBroadCastRawTransactionResponse;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BroadCastRawTransactionResponse failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BroadCastRawTransactionResponse'", e);
                    }
                    // deserialize BitcoinTransactionOutput
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BitcoinTransactionOutput.validateJsonElement(jsonElement);
                      actualAdapter = adapterBitcoinTransactionOutput;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BitcoinTransactionOutput failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BitcoinTransactionOutput'", e);
                    }
                    // deserialize Erc721Response
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Erc721Response.validateJsonElement(jsonElement);
                      actualAdapter = adapterErc721Response;
                      AccountControllerResponseData ret = new AccountControllerResponseData();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Erc721Response failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Erc721Response'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for AccountControllerResponseData: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccountControllerResponseData() {
        super("anyOf", Boolean.FALSE);
    }

    public AccountControllerResponseData(AaveReservesData o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(AccountResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(BalanceResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(BitcoinTransactionOutput o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(BroadCastRawTransactionResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(ENSReverseResolveResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(EnsResolveResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(Erc1155Response o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(Erc20Response o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(Erc721Response o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(NonceResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(SignMessage o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccountControllerResponseData(Transaction o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("NonceResponse", NonceResponse.class);
        schemas.put("BalanceResponse", BalanceResponse.class);
        schemas.put("Transaction", Transaction.class);
        schemas.put("AccountResponse", AccountResponse.class);
        schemas.put("SignMessage", SignMessage.class);
        schemas.put("EnsResolveResponse", EnsResolveResponse.class);
        schemas.put("ENSReverseResolveResponse", ENSReverseResolveResponse.class);
        schemas.put("AaveReservesData", AaveReservesData.class);
        schemas.put("Erc20Response", Erc20Response.class);
        schemas.put("Erc1155Response", Erc1155Response.class);
        schemas.put("BroadCastRawTransactionResponse", BroadCastRawTransactionResponse.class);
        schemas.put("BitcoinTransactionOutput", BitcoinTransactionOutput.class);
        schemas.put("Erc721Response", Erc721Response.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccountControllerResponseData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof NonceResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BalanceResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Transaction) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EnsResolveResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ENSReverseResolveResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AaveReservesData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Erc20Response) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Erc1155Response) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BroadCastRawTransactionResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BitcoinTransactionOutput) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Erc721Response) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction");
    }

    /**
     * Get the actual instance, which can be the following:
     * AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction
     *
     * @return The actual instance (AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `NonceResponse`. If the actual instance is not `NonceResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NonceResponse`
     * @throws ClassCastException if the instance is not `NonceResponse`
     */
    public NonceResponse getNonceResponse() throws ClassCastException {
        return (NonceResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BalanceResponse`. If the actual instance is not `BalanceResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BalanceResponse`
     * @throws ClassCastException if the instance is not `BalanceResponse`
     */
    public BalanceResponse getBalanceResponse() throws ClassCastException {
        return (BalanceResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Transaction`. If the actual instance is not `Transaction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Transaction`
     * @throws ClassCastException if the instance is not `Transaction`
     */
    public Transaction getTransaction() throws ClassCastException {
        return (Transaction)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccountResponse`. If the actual instance is not `AccountResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountResponse`
     * @throws ClassCastException if the instance is not `AccountResponse`
     */
    public AccountResponse getAccountResponse() throws ClassCastException {
        return (AccountResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SignMessage`. If the actual instance is not `SignMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignMessage`
     * @throws ClassCastException if the instance is not `SignMessage`
     */
    public SignMessage getSignMessage() throws ClassCastException {
        return (SignMessage)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EnsResolveResponse`. If the actual instance is not `EnsResolveResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EnsResolveResponse`
     * @throws ClassCastException if the instance is not `EnsResolveResponse`
     */
    public EnsResolveResponse getEnsResolveResponse() throws ClassCastException {
        return (EnsResolveResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ENSReverseResolveResponse`. If the actual instance is not `ENSReverseResolveResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ENSReverseResolveResponse`
     * @throws ClassCastException if the instance is not `ENSReverseResolveResponse`
     */
    public ENSReverseResolveResponse getENSReverseResolveResponse() throws ClassCastException {
        return (ENSReverseResolveResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AaveReservesData`. If the actual instance is not `AaveReservesData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AaveReservesData`
     * @throws ClassCastException if the instance is not `AaveReservesData`
     */
    public AaveReservesData getAaveReservesData() throws ClassCastException {
        return (AaveReservesData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Erc20Response`. If the actual instance is not `Erc20Response`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Erc20Response`
     * @throws ClassCastException if the instance is not `Erc20Response`
     */
    public Erc20Response getErc20Response() throws ClassCastException {
        return (Erc20Response)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Erc1155Response`. If the actual instance is not `Erc1155Response`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Erc1155Response`
     * @throws ClassCastException if the instance is not `Erc1155Response`
     */
    public Erc1155Response getErc1155Response() throws ClassCastException {
        return (Erc1155Response)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BroadCastRawTransactionResponse`. If the actual instance is not `BroadCastRawTransactionResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BroadCastRawTransactionResponse`
     * @throws ClassCastException if the instance is not `BroadCastRawTransactionResponse`
     */
    public BroadCastRawTransactionResponse getBroadCastRawTransactionResponse() throws ClassCastException {
        return (BroadCastRawTransactionResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BitcoinTransactionOutput`. If the actual instance is not `BitcoinTransactionOutput`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BitcoinTransactionOutput`
     * @throws ClassCastException if the instance is not `BitcoinTransactionOutput`
     */
    public BitcoinTransactionOutput getBitcoinTransactionOutput() throws ClassCastException {
        return (BitcoinTransactionOutput)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Erc721Response`. If the actual instance is not `Erc721Response`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Erc721Response`
     * @throws ClassCastException if the instance is not `Erc721Response`
     */
    public Erc721Response getErc721Response() throws ClassCastException {
        return (Erc721Response)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountControllerResponseData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate anyOf schemas one by one
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with NonceResponse
    try {
      NonceResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NonceResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BalanceResponse
    try {
      BalanceResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BalanceResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Transaction
    try {
      Transaction.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Transaction failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AccountResponse
    try {
      AccountResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignMessage
    try {
      SignMessage.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignMessage failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EnsResolveResponse
    try {
      EnsResolveResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EnsResolveResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ENSReverseResolveResponse
    try {
      ENSReverseResolveResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ENSReverseResolveResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AaveReservesData
    try {
      AaveReservesData.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AaveReservesData failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Erc20Response
    try {
      Erc20Response.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Erc20Response failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Erc1155Response
    try {
      Erc1155Response.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Erc1155Response failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BroadCastRawTransactionResponse
    try {
      BroadCastRawTransactionResponse.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BroadCastRawTransactionResponse failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BitcoinTransactionOutput
    try {
      BitcoinTransactionOutput.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BitcoinTransactionOutput failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Erc721Response
    try {
      Erc721Response.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Erc721Response failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    throw new IOException(String.format("The JSON string is invalid for AccountControllerResponseData with anyOf schemas: AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    
  }

 /**
  * Create an instance of AccountControllerResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountControllerResponseData
  * @throws IOException if the JSON string is invalid with respect to AccountControllerResponseData
  */
  public static AccountControllerResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountControllerResponseData.class);
  }

 /**
  * Convert an instance of AccountControllerResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

