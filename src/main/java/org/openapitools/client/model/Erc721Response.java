/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Erc721Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T19:39:59.155569+10:00[Australia/Brisbane]")
public class Erc721Response {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Double type;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private Double chainId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_GAS = "gas";
  @SerializedName(SERIALIZED_NAME_GAS)
  private String gas;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gas_price";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private String gasPrice;

  public static final String SERIALIZED_NAME_GAS_TIP_CAP = "gas_tip_cap";
  @SerializedName(SERIALIZED_NAME_GAS_TIP_CAP)
  private String gasTipCap;

  public static final String SERIALIZED_NAME_GAS_FEE_CAP = "gas_fee_cap";
  @SerializedName(SERIALIZED_NAME_GAS_FEE_CAP)
  private String gasFeeCap;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private Double nonce;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_BLOB_GAS = "blob_gas";
  @SerializedName(SERIALIZED_NAME_BLOB_GAS)
  private String blobGas;

  public static final String SERIALIZED_NAME_BLOB_GAS_FEE_CAP = "blob_gas_fee_cap";
  @SerializedName(SERIALIZED_NAME_BLOB_GAS_FEE_CAP)
  private String blobGasFeeCap;

  public static final String SERIALIZED_NAME_BLOB_HASHES = "blob_hashes";
  @SerializedName(SERIALIZED_NAME_BLOB_HASHES)
  private List<String> blobHashes;

  public static final String SERIALIZED_NAME_V = "v";
  @SerializedName(SERIALIZED_NAME_V)
  private String v;

  public static final String SERIALIZED_NAME_R = "r";
  @SerializedName(SERIALIZED_NAME_R)
  private String r;

  public static final String SERIALIZED_NAME_S = "s";
  @SerializedName(SERIALIZED_NAME_S)
  private String s;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_BALANCE_OF = "balance_of";
  @SerializedName(SERIALIZED_NAME_BALANCE_OF)
  private String balanceOf;

  public static final String SERIALIZED_NAME_OWNER_OF = "owner_of";
  @SerializedName(SERIALIZED_NAME_OWNER_OF)
  private String ownerOf;

  public static final String SERIALIZED_NAME_TOKEN_URI = "token_uri";
  @SerializedName(SERIALIZED_NAME_TOKEN_URI)
  private String tokenUri;

  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contract_address";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  private String contractAddress;

  public static final String SERIALIZED_NAME_IS_APPROVED_FOR_ALL = "isApprovedForAll";
  @SerializedName(SERIALIZED_NAME_IS_APPROVED_FOR_ALL)
  private String isApprovedForAll;

  public Erc721Response() {
  }

  public Erc721Response type(Double type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Double getType() {
    return type;
  }


  public void setType(Double type) {
    this.type = type;
  }


  public Erc721Response chainId(Double chainId) {
    
    this.chainId = chainId;
    return this;
  }

   /**
   * Get chainId
   * @return chainId
  **/
  @javax.annotation.Nullable
  public Double getChainId() {
    return chainId;
  }


  public void setChainId(Double chainId) {
    this.chainId = chainId;
  }


  public Erc721Response data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public Erc721Response gas(String gas) {
    
    this.gas = gas;
    return this;
  }

   /**
   * Get gas
   * @return gas
  **/
  @javax.annotation.Nullable
  public String getGas() {
    return gas;
  }


  public void setGas(String gas) {
    this.gas = gas;
  }


  public Erc721Response gasPrice(String gasPrice) {
    
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * Get gasPrice
   * @return gasPrice
  **/
  @javax.annotation.Nullable
  public String getGasPrice() {
    return gasPrice;
  }


  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  public Erc721Response gasTipCap(String gasTipCap) {
    
    this.gasTipCap = gasTipCap;
    return this;
  }

   /**
   * Get gasTipCap
   * @return gasTipCap
  **/
  @javax.annotation.Nullable
  public String getGasTipCap() {
    return gasTipCap;
  }


  public void setGasTipCap(String gasTipCap) {
    this.gasTipCap = gasTipCap;
  }


  public Erc721Response gasFeeCap(String gasFeeCap) {
    
    this.gasFeeCap = gasFeeCap;
    return this;
  }

   /**
   * Get gasFeeCap
   * @return gasFeeCap
  **/
  @javax.annotation.Nullable
  public String getGasFeeCap() {
    return gasFeeCap;
  }


  public void setGasFeeCap(String gasFeeCap) {
    this.gasFeeCap = gasFeeCap;
  }


  public Erc721Response value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public Erc721Response nonce(Double nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nullable
  public Double getNonce() {
    return nonce;
  }


  public void setNonce(Double nonce) {
    this.nonce = nonce;
  }


  public Erc721Response from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public Erc721Response to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public Erc721Response blobGas(String blobGas) {
    
    this.blobGas = blobGas;
    return this;
  }

   /**
   * Get blobGas
   * @return blobGas
  **/
  @javax.annotation.Nullable
  public String getBlobGas() {
    return blobGas;
  }


  public void setBlobGas(String blobGas) {
    this.blobGas = blobGas;
  }


  public Erc721Response blobGasFeeCap(String blobGasFeeCap) {
    
    this.blobGasFeeCap = blobGasFeeCap;
    return this;
  }

   /**
   * Get blobGasFeeCap
   * @return blobGasFeeCap
  **/
  @javax.annotation.Nullable
  public String getBlobGasFeeCap() {
    return blobGasFeeCap;
  }


  public void setBlobGasFeeCap(String blobGasFeeCap) {
    this.blobGasFeeCap = blobGasFeeCap;
  }


  public Erc721Response blobHashes(List<String> blobHashes) {
    
    this.blobHashes = blobHashes;
    return this;
  }

  public Erc721Response addBlobHashesItem(String blobHashesItem) {
    if (this.blobHashes == null) {
      this.blobHashes = new ArrayList<>();
    }
    this.blobHashes.add(blobHashesItem);
    return this;
  }

   /**
   * Get blobHashes
   * @return blobHashes
  **/
  @javax.annotation.Nullable
  public List<String> getBlobHashes() {
    return blobHashes;
  }


  public void setBlobHashes(List<String> blobHashes) {
    this.blobHashes = blobHashes;
  }


  public Erc721Response v(String v) {
    
    this.v = v;
    return this;
  }

   /**
   * Get v
   * @return v
  **/
  @javax.annotation.Nullable
  public String getV() {
    return v;
  }


  public void setV(String v) {
    this.v = v;
  }


  public Erc721Response r(String r) {
    
    this.r = r;
    return this;
  }

   /**
   * Get r
   * @return r
  **/
  @javax.annotation.Nullable
  public String getR() {
    return r;
  }


  public void setR(String r) {
    this.r = r;
  }


  public Erc721Response s(String s) {
    
    this.s = s;
    return this;
  }

   /**
   * Get s
   * @return s
  **/
  @javax.annotation.Nullable
  public String getS() {
    return s;
  }


  public void setS(String s) {
    this.s = s;
  }


  public Erc721Response name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Erc721Response symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Erc721Response balanceOf(String balanceOf) {
    
    this.balanceOf = balanceOf;
    return this;
  }

   /**
   * Get balanceOf
   * @return balanceOf
  **/
  @javax.annotation.Nullable
  public String getBalanceOf() {
    return balanceOf;
  }


  public void setBalanceOf(String balanceOf) {
    this.balanceOf = balanceOf;
  }


  public Erc721Response ownerOf(String ownerOf) {
    
    this.ownerOf = ownerOf;
    return this;
  }

   /**
   * Get ownerOf
   * @return ownerOf
  **/
  @javax.annotation.Nullable
  public String getOwnerOf() {
    return ownerOf;
  }


  public void setOwnerOf(String ownerOf) {
    this.ownerOf = ownerOf;
  }


  public Erc721Response tokenUri(String tokenUri) {
    
    this.tokenUri = tokenUri;
    return this;
  }

   /**
   * Get tokenUri
   * @return tokenUri
  **/
  @javax.annotation.Nullable
  public String getTokenUri() {
    return tokenUri;
  }


  public void setTokenUri(String tokenUri) {
    this.tokenUri = tokenUri;
  }


  public Erc721Response contractAddress(String contractAddress) {
    
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * Get contractAddress
   * @return contractAddress
  **/
  @javax.annotation.Nullable
  public String getContractAddress() {
    return contractAddress;
  }


  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public Erc721Response isApprovedForAll(String isApprovedForAll) {
    
    this.isApprovedForAll = isApprovedForAll;
    return this;
  }

   /**
   * Get isApprovedForAll
   * @return isApprovedForAll
  **/
  @javax.annotation.Nullable
  public String getIsApprovedForAll() {
    return isApprovedForAll;
  }


  public void setIsApprovedForAll(String isApprovedForAll) {
    this.isApprovedForAll = isApprovedForAll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Erc721Response erc721Response = (Erc721Response) o;
    return Objects.equals(this.type, erc721Response.type) &&
        Objects.equals(this.chainId, erc721Response.chainId) &&
        Objects.equals(this.data, erc721Response.data) &&
        Objects.equals(this.gas, erc721Response.gas) &&
        Objects.equals(this.gasPrice, erc721Response.gasPrice) &&
        Objects.equals(this.gasTipCap, erc721Response.gasTipCap) &&
        Objects.equals(this.gasFeeCap, erc721Response.gasFeeCap) &&
        Objects.equals(this.value, erc721Response.value) &&
        Objects.equals(this.nonce, erc721Response.nonce) &&
        Objects.equals(this.from, erc721Response.from) &&
        Objects.equals(this.to, erc721Response.to) &&
        Objects.equals(this.blobGas, erc721Response.blobGas) &&
        Objects.equals(this.blobGasFeeCap, erc721Response.blobGasFeeCap) &&
        Objects.equals(this.blobHashes, erc721Response.blobHashes) &&
        Objects.equals(this.v, erc721Response.v) &&
        Objects.equals(this.r, erc721Response.r) &&
        Objects.equals(this.s, erc721Response.s) &&
        Objects.equals(this.name, erc721Response.name) &&
        Objects.equals(this.symbol, erc721Response.symbol) &&
        Objects.equals(this.balanceOf, erc721Response.balanceOf) &&
        Objects.equals(this.ownerOf, erc721Response.ownerOf) &&
        Objects.equals(this.tokenUri, erc721Response.tokenUri) &&
        Objects.equals(this.contractAddress, erc721Response.contractAddress) &&
        Objects.equals(this.isApprovedForAll, erc721Response.isApprovedForAll);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, chainId, data, gas, gasPrice, gasTipCap, gasFeeCap, value, nonce, from, to, blobGas, blobGasFeeCap, blobHashes, v, r, s, name, symbol, balanceOf, ownerOf, tokenUri, contractAddress, isApprovedForAll);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Erc721Response {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    gasTipCap: ").append(toIndentedString(gasTipCap)).append("\n");
    sb.append("    gasFeeCap: ").append(toIndentedString(gasFeeCap)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    blobGas: ").append(toIndentedString(blobGas)).append("\n");
    sb.append("    blobGasFeeCap: ").append(toIndentedString(blobGasFeeCap)).append("\n");
    sb.append("    blobHashes: ").append(toIndentedString(blobHashes)).append("\n");
    sb.append("    v: ").append(toIndentedString(v)).append("\n");
    sb.append("    r: ").append(toIndentedString(r)).append("\n");
    sb.append("    s: ").append(toIndentedString(s)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    balanceOf: ").append(toIndentedString(balanceOf)).append("\n");
    sb.append("    ownerOf: ").append(toIndentedString(ownerOf)).append("\n");
    sb.append("    tokenUri: ").append(toIndentedString(tokenUri)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    isApprovedForAll: ").append(toIndentedString(isApprovedForAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("chain_id");
    openapiFields.add("data");
    openapiFields.add("gas");
    openapiFields.add("gas_price");
    openapiFields.add("gas_tip_cap");
    openapiFields.add("gas_fee_cap");
    openapiFields.add("value");
    openapiFields.add("nonce");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("blob_gas");
    openapiFields.add("blob_gas_fee_cap");
    openapiFields.add("blob_hashes");
    openapiFields.add("v");
    openapiFields.add("r");
    openapiFields.add("s");
    openapiFields.add("name");
    openapiFields.add("symbol");
    openapiFields.add("balance_of");
    openapiFields.add("owner_of");
    openapiFields.add("token_uri");
    openapiFields.add("contract_address");
    openapiFields.add("isApprovedForAll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Erc721Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Erc721Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Erc721Response is not found in the empty JSON string", Erc721Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Erc721Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Erc721Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("gas") != null && !jsonObj.get("gas").isJsonNull()) && !jsonObj.get("gas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas").toString()));
      }
      if ((jsonObj.get("gas_price") != null && !jsonObj.get("gas_price").isJsonNull()) && !jsonObj.get("gas_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_price").toString()));
      }
      if ((jsonObj.get("gas_tip_cap") != null && !jsonObj.get("gas_tip_cap").isJsonNull()) && !jsonObj.get("gas_tip_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_tip_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_tip_cap").toString()));
      }
      if ((jsonObj.get("gas_fee_cap") != null && !jsonObj.get("gas_fee_cap").isJsonNull()) && !jsonObj.get("gas_fee_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_fee_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_fee_cap").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("blob_gas") != null && !jsonObj.get("blob_gas").isJsonNull()) && !jsonObj.get("blob_gas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_gas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_gas").toString()));
      }
      if ((jsonObj.get("blob_gas_fee_cap") != null && !jsonObj.get("blob_gas_fee_cap").isJsonNull()) && !jsonObj.get("blob_gas_fee_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_gas_fee_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_gas_fee_cap").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blob_hashes") != null && !jsonObj.get("blob_hashes").isJsonNull() && !jsonObj.get("blob_hashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_hashes` to be an array in the JSON string but got `%s`", jsonObj.get("blob_hashes").toString()));
      }
      if ((jsonObj.get("v") != null && !jsonObj.get("v").isJsonNull()) && !jsonObj.get("v").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v").toString()));
      }
      if ((jsonObj.get("r") != null && !jsonObj.get("r").isJsonNull()) && !jsonObj.get("r").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `r` to be a primitive type in the JSON string but got `%s`", jsonObj.get("r").toString()));
      }
      if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull()) && !jsonObj.get("s").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("balance_of") != null && !jsonObj.get("balance_of").isJsonNull()) && !jsonObj.get("balance_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balance_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balance_of").toString()));
      }
      if ((jsonObj.get("owner_of") != null && !jsonObj.get("owner_of").isJsonNull()) && !jsonObj.get("owner_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_of").toString()));
      }
      if ((jsonObj.get("token_uri") != null && !jsonObj.get("token_uri").isJsonNull()) && !jsonObj.get("token_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_uri").toString()));
      }
      if ((jsonObj.get("contract_address") != null && !jsonObj.get("contract_address").isJsonNull()) && !jsonObj.get("contract_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_address").toString()));
      }
      if ((jsonObj.get("isApprovedForAll") != null && !jsonObj.get("isApprovedForAll").isJsonNull()) && !jsonObj.get("isApprovedForAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isApprovedForAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isApprovedForAll").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Erc721Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Erc721Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Erc721Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Erc721Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Erc721Response>() {
           @Override
           public void write(JsonWriter out, Erc721Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Erc721Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Erc721Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Erc721Response
  * @throws IOException if the JSON string is invalid with respect to Erc721Response
  */
  public static Erc721Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Erc721Response.class);
  }

 /**
  * Convert an instance of Erc721Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

