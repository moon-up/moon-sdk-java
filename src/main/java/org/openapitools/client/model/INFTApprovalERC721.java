/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * INFTApprovalERC721
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T19:39:59.155569+10:00[Australia/Brisbane]")
public class INFTApprovalERC721 {
  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private String contract;

  public static final String SERIALIZED_NAME_LOG_INDEX = "logIndex";
  @SerializedName(SERIALIZED_NAME_LOG_INDEX)
  private String logIndex;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private String approved;

  public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_TOKEN_CONTRACT_TYPE = "tokenContractType";
  @SerializedName(SERIALIZED_NAME_TOKEN_CONTRACT_TYPE)
  private String tokenContractType;

  public static final String SERIALIZED_NAME_TOKEN_NAME = "tokenName";
  @SerializedName(SERIALIZED_NAME_TOKEN_NAME)
  private String tokenName;

  public static final String SERIALIZED_NAME_TOKEN_SYMBOL = "tokenSymbol";
  @SerializedName(SERIALIZED_NAME_TOKEN_SYMBOL)
  private String tokenSymbol;

  public INFTApprovalERC721() {
  }

  public INFTApprovalERC721 transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @javax.annotation.Nonnull
  public String getTransactionHash() {
    return transactionHash;
  }


  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public INFTApprovalERC721 contract(String contract) {
    
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @javax.annotation.Nonnull
  public String getContract() {
    return contract;
  }


  public void setContract(String contract) {
    this.contract = contract;
  }


  public INFTApprovalERC721 logIndex(String logIndex) {
    
    this.logIndex = logIndex;
    return this;
  }

   /**
   * Get logIndex
   * @return logIndex
  **/
  @javax.annotation.Nonnull
  public String getLogIndex() {
    return logIndex;
  }


  public void setLogIndex(String logIndex) {
    this.logIndex = logIndex;
  }


  public INFTApprovalERC721 owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public INFTApprovalERC721 approved(String approved) {
    
    this.approved = approved;
    return this;
  }

   /**
   * Get approved
   * @return approved
  **/
  @javax.annotation.Nonnull
  public String getApproved() {
    return approved;
  }


  public void setApproved(String approved) {
    this.approved = approved;
  }


  public INFTApprovalERC721 tokenId(String tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Get tokenId
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }


  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public INFTApprovalERC721 tokenContractType(String tokenContractType) {
    
    this.tokenContractType = tokenContractType;
    return this;
  }

   /**
   * Get tokenContractType
   * @return tokenContractType
  **/
  @javax.annotation.Nonnull
  public String getTokenContractType() {
    return tokenContractType;
  }


  public void setTokenContractType(String tokenContractType) {
    this.tokenContractType = tokenContractType;
  }


  public INFTApprovalERC721 tokenName(String tokenName) {
    
    this.tokenName = tokenName;
    return this;
  }

   /**
   * Get tokenName
   * @return tokenName
  **/
  @javax.annotation.Nonnull
  public String getTokenName() {
    return tokenName;
  }


  public void setTokenName(String tokenName) {
    this.tokenName = tokenName;
  }


  public INFTApprovalERC721 tokenSymbol(String tokenSymbol) {
    
    this.tokenSymbol = tokenSymbol;
    return this;
  }

   /**
   * Get tokenSymbol
   * @return tokenSymbol
  **/
  @javax.annotation.Nonnull
  public String getTokenSymbol() {
    return tokenSymbol;
  }


  public void setTokenSymbol(String tokenSymbol) {
    this.tokenSymbol = tokenSymbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    INFTApprovalERC721 inFTApprovalERC721 = (INFTApprovalERC721) o;
    return Objects.equals(this.transactionHash, inFTApprovalERC721.transactionHash) &&
        Objects.equals(this.contract, inFTApprovalERC721.contract) &&
        Objects.equals(this.logIndex, inFTApprovalERC721.logIndex) &&
        Objects.equals(this.owner, inFTApprovalERC721.owner) &&
        Objects.equals(this.approved, inFTApprovalERC721.approved) &&
        Objects.equals(this.tokenId, inFTApprovalERC721.tokenId) &&
        Objects.equals(this.tokenContractType, inFTApprovalERC721.tokenContractType) &&
        Objects.equals(this.tokenName, inFTApprovalERC721.tokenName) &&
        Objects.equals(this.tokenSymbol, inFTApprovalERC721.tokenSymbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionHash, contract, logIndex, owner, approved, tokenId, tokenContractType, tokenName, tokenSymbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class INFTApprovalERC721 {\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    logIndex: ").append(toIndentedString(logIndex)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenContractType: ").append(toIndentedString(tokenContractType)).append("\n");
    sb.append("    tokenName: ").append(toIndentedString(tokenName)).append("\n");
    sb.append("    tokenSymbol: ").append(toIndentedString(tokenSymbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionHash");
    openapiFields.add("contract");
    openapiFields.add("logIndex");
    openapiFields.add("owner");
    openapiFields.add("approved");
    openapiFields.add("tokenId");
    openapiFields.add("tokenContractType");
    openapiFields.add("tokenName");
    openapiFields.add("tokenSymbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionHash");
    openapiRequiredFields.add("contract");
    openapiRequiredFields.add("logIndex");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("approved");
    openapiRequiredFields.add("tokenId");
    openapiRequiredFields.add("tokenContractType");
    openapiRequiredFields.add("tokenName");
    openapiRequiredFields.add("tokenSymbol");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to INFTApprovalERC721
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!INFTApprovalERC721.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in INFTApprovalERC721 is not found in the empty JSON string", INFTApprovalERC721.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!INFTApprovalERC721.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `INFTApprovalERC721` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : INFTApprovalERC721.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionHash").toString()));
      }
      if (!jsonObj.get("contract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract").toString()));
      }
      if (!jsonObj.get("logIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logIndex").toString()));
      }
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if (!jsonObj.get("approved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved").toString()));
      }
      if (!jsonObj.get("tokenId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenId").toString()));
      }
      if (!jsonObj.get("tokenContractType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenContractType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenContractType").toString()));
      }
      if (!jsonObj.get("tokenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenName").toString()));
      }
      if (!jsonObj.get("tokenSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenSymbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!INFTApprovalERC721.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'INFTApprovalERC721' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<INFTApprovalERC721> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(INFTApprovalERC721.class));

       return (TypeAdapter<T>) new TypeAdapter<INFTApprovalERC721>() {
           @Override
           public void write(JsonWriter out, INFTApprovalERC721 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public INFTApprovalERC721 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of INFTApprovalERC721 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of INFTApprovalERC721
  * @throws IOException if the JSON string is invalid with respect to INFTApprovalERC721
  */
  public static INFTApprovalERC721 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, INFTApprovalERC721.class);
  }

 /**
  * Convert an instance of INFTApprovalERC721 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

