/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.api;

import org.usemoonai.moonsdk.client.ApiException;
import org.usemoonai.moonsdk.models.AccountAPIResponse;
import org.usemoonai.moonsdk.models.BalanceAPIResponse;
import org.usemoonai.moonsdk.models.BroadCastRawTransactionAPIResponse;
import org.usemoonai.moonsdk.models.BroadcastInput;
import org.usemoonai.moonsdk.models.CreateAccountInput;
import org.usemoonai.moonsdk.models.DeployInput;
import org.usemoonai.moonsdk.models.InputBody;
import org.usemoonai.moonsdk.models.NonceAPIResponse;
import org.usemoonai.moonsdk.models.SignMessage;
import org.usemoonai.moonsdk.models.SignMessageAPIResponse;
import org.usemoonai.moonsdk.models.SignTypedData;
import org.usemoonai.moonsdk.models.TransactionAPIResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void broadcastTxTest() throws ApiException {
        String authorization = null;
        String accountName = null;
        BroadcastInput broadcastInput = null;
        BroadCastRawTransactionAPIResponse response = api.broadcastTx(authorization, accountName, broadcastInput);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTest() throws ApiException {
        String authorization = null;
        CreateAccountInput createAccountInput = null;
        AccountAPIResponse response = api.createAccount(authorization, createAccountInput);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String authorization = null;
        String accountName = null;
        AccountAPIResponse response = api.deleteAccount(authorization, accountName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployContractTest() throws ApiException {
        String authorization = null;
        String accountName = null;
        DeployInput deployInput = null;
        TransactionAPIResponse response = api.deployContract(authorization, accountName, deployInput);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String authorization = null;
        String accountName = null;
        AccountAPIResponse response = api.getAccount(authorization, accountName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBalanceTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        String chainId = null;
        BalanceAPIResponse response = api.getBalance(accountName, authorization, chainId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNonceTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        NonceAPIResponse response = api.getNonce(accountName, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountsTest() throws ApiException {
        String authorization = null;
        AccountAPIResponse response = api.listAccounts(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signMessageTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        SignMessage signMessage = null;
        SignMessageAPIResponse response = api.signMessage(accountName, authorization, signMessage);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signTransactionTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        InputBody inputBody = null;
        TransactionAPIResponse response = api.signTransaction(accountName, authorization, inputBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signTypedDataTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        SignTypedData signTypedData = null;
        SignMessageAPIResponse response = api.signTypedData(accountName, authorization, signTypedData);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferEthTest() throws ApiException {
        String accountName = null;
        String authorization = null;
        InputBody inputBody = null;
        TransactionAPIResponse response = api.transferEth(accountName, authorization, inputBody);
        // TODO: test validations
    }

}
