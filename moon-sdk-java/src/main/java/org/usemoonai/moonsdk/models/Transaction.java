/*
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.usemoonai.moonsdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.usemoonai.moonsdk.models.TransactionData;
import org.usemoonai.moonsdk.models.TransactionRequest;
import org.usemoonai.moonsdk.models.Tx;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.usemoonai.moonsdk.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-17T13:07:28.038327556+10:00[Australia/Brisbane]", comments = "Generator version: 7.4.0")
public class Transaction {
  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transaction_hash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_SIGNED_TRANSACTION = "signed_transaction";
  @SerializedName(SERIALIZED_NAME_SIGNED_TRANSACTION)
  private String signedTransaction;

  public static final String SERIALIZED_NAME_RAW_TRANSACTION = "raw_transaction";
  @SerializedName(SERIALIZED_NAME_RAW_TRANSACTION)
  private String rawTransaction;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<TransactionData> transactions;

  public static final String SERIALIZED_NAME_MOON_SCAN_URL = "moon_scan_url";
  @SerializedName(SERIALIZED_NAME_MOON_SCAN_URL)
  private String moonScanUrl;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Tx transaction;

  public static final String SERIALIZED_NAME_USER_OPS = "userOps";
  @SerializedName(SERIALIZED_NAME_USER_OPS)
  private List<TransactionRequest> userOps;

  public static final String SERIALIZED_NAME_USEROP_TRANSACTION = "userop_transaction";
  @SerializedName(SERIALIZED_NAME_USEROP_TRANSACTION)
  private String useropTransaction;

  public Transaction() {
  }

  public Transaction transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @javax.annotation.Nullable
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public Transaction signedTransaction(String signedTransaction) {
    this.signedTransaction = signedTransaction;
    return this;
  }

   /**
   * Get signedTransaction
   * @return signedTransaction
  **/
  @javax.annotation.Nullable
  public String getSignedTransaction() {
    return signedTransaction;
  }

  public void setSignedTransaction(String signedTransaction) {
    this.signedTransaction = signedTransaction;
  }


  public Transaction rawTransaction(String rawTransaction) {
    this.rawTransaction = rawTransaction;
    return this;
  }

   /**
   * Get rawTransaction
   * @return rawTransaction
  **/
  @javax.annotation.Nullable
  public String getRawTransaction() {
    return rawTransaction;
  }

  public void setRawTransaction(String rawTransaction) {
    this.rawTransaction = rawTransaction;
  }


  public Transaction data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public Transaction transactions(List<TransactionData> transactions) {
    this.transactions = transactions;
    return this;
  }

  public Transaction addTransactionsItem(TransactionData transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @javax.annotation.Nullable
  public List<TransactionData> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<TransactionData> transactions) {
    this.transactions = transactions;
  }


  public Transaction moonScanUrl(String moonScanUrl) {
    this.moonScanUrl = moonScanUrl;
    return this;
  }

   /**
   * Get moonScanUrl
   * @return moonScanUrl
  **/
  @javax.annotation.Nullable
  public String getMoonScanUrl() {
    return moonScanUrl;
  }

  public void setMoonScanUrl(String moonScanUrl) {
    this.moonScanUrl = moonScanUrl;
  }


  public Transaction signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public Transaction transaction(Tx transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable
  public Tx getTransaction() {
    return transaction;
  }

  public void setTransaction(Tx transaction) {
    this.transaction = transaction;
  }


  public Transaction userOps(List<TransactionRequest> userOps) {
    this.userOps = userOps;
    return this;
  }

  public Transaction addUserOpsItem(TransactionRequest userOpsItem) {
    if (this.userOps == null) {
      this.userOps = new ArrayList<>();
    }
    this.userOps.add(userOpsItem);
    return this;
  }

   /**
   * Get userOps
   * @return userOps
  **/
  @javax.annotation.Nullable
  public List<TransactionRequest> getUserOps() {
    return userOps;
  }

  public void setUserOps(List<TransactionRequest> userOps) {
    this.userOps = userOps;
  }


  public Transaction useropTransaction(String useropTransaction) {
    this.useropTransaction = useropTransaction;
    return this;
  }

   /**
   * Get useropTransaction
   * @return useropTransaction
  **/
  @javax.annotation.Nullable
  public String getUseropTransaction() {
    return useropTransaction;
  }

  public void setUseropTransaction(String useropTransaction) {
    this.useropTransaction = useropTransaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.transactionHash, transaction.transactionHash) &&
        Objects.equals(this.signedTransaction, transaction.signedTransaction) &&
        Objects.equals(this.rawTransaction, transaction.rawTransaction) &&
        Objects.equals(this.data, transaction.data) &&
        Objects.equals(this.transactions, transaction.transactions) &&
        Objects.equals(this.moonScanUrl, transaction.moonScanUrl) &&
        Objects.equals(this.signature, transaction.signature) &&
        Objects.equals(this.transaction, transaction.transaction) &&
        Objects.equals(this.userOps, transaction.userOps) &&
        Objects.equals(this.useropTransaction, transaction.useropTransaction);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionHash, signedTransaction, rawTransaction, data, transactions, moonScanUrl, signature, transaction, userOps, useropTransaction);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    signedTransaction: ").append(toIndentedString(signedTransaction)).append("\n");
    sb.append("    rawTransaction: ").append(toIndentedString(rawTransaction)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    moonScanUrl: ").append(toIndentedString(moonScanUrl)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    userOps: ").append(toIndentedString(userOps)).append("\n");
    sb.append("    useropTransaction: ").append(toIndentedString(useropTransaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_hash");
    openapiFields.add("signed_transaction");
    openapiFields.add("raw_transaction");
    openapiFields.add("data");
    openapiFields.add("transactions");
    openapiFields.add("moon_scan_url");
    openapiFields.add("signature");
    openapiFields.add("transaction");
    openapiFields.add("userOps");
    openapiFields.add("userop_transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Transaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transaction_hash") != null && !jsonObj.get("transaction_hash").isJsonNull()) && !jsonObj.get("transaction_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_hash").toString()));
      }
      if ((jsonObj.get("signed_transaction") != null && !jsonObj.get("signed_transaction").isJsonNull()) && !jsonObj.get("signed_transaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signed_transaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signed_transaction").toString()));
      }
      if ((jsonObj.get("raw_transaction") != null && !jsonObj.get("raw_transaction").isJsonNull()) && !jsonObj.get("raw_transaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_transaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_transaction").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            TransactionData.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
      if ((jsonObj.get("moon_scan_url") != null && !jsonObj.get("moon_scan_url").isJsonNull()) && !jsonObj.get("moon_scan_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moon_scan_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moon_scan_url").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        Tx.validateJsonElement(jsonObj.get("transaction"));
      }
      if (jsonObj.get("userOps") != null && !jsonObj.get("userOps").isJsonNull()) {
        JsonArray jsonArrayuserOps = jsonObj.getAsJsonArray("userOps");
        if (jsonArrayuserOps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userOps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userOps` to be an array in the JSON string but got `%s`", jsonObj.get("userOps").toString()));
          }

          // validate the optional field `userOps` (array)
          for (int i = 0; i < jsonArrayuserOps.size(); i++) {
            TransactionRequest.validateJsonElement(jsonArrayuserOps.get(i));
          };
        }
      }
      if ((jsonObj.get("userop_transaction") != null && !jsonObj.get("userop_transaction").isJsonNull()) && !jsonObj.get("userop_transaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userop_transaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userop_transaction").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Transaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Transaction
  * @throws IOException if the JSON string is invalid with respect to Transaction
  */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

 /**
  * Convert an instance of Transaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

